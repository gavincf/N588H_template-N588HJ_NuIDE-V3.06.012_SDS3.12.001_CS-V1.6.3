;=======================================
;	<< WAITKEY_USER.ASM >>
;===========================================
;


WAITKEY_CHK:

;=========================================
WAITKEY_CHK_PCC:




	JMP	WAITKEY_CHK_RET

;===================================

WAITKEY_TMG0:
	
WAITKEY_TMG0_PCC::


	JMP	WAITKEY_TMG0_RET

;===============================================

;=================================
WAITKEY_SPCH1END:

WAITKEY_SPCH1END_PCC:


	
	JMP	WAITKEY_SPCH1END_RET

;=================================
WAITKEY_SPCH2END:

WAITKEY_SPCH2END_PCC:



	JMP	WAITKEY_SPCH2END_RET

;==============================
WAITKEY_MSEND:

WAITKEY_MSEND_PCC:



	JMP	WAITKEY_MSEND_RET

;=================================
WAITKEY_EVT:

WAITKEY_EVT_PCC:


	JMP	WAITKEY_EVT_RET
	
;=================================

;==================================
WAITKEY_FXF15:
;5.33MS

WAITKEY_FXF15_PCC:



WAITKEY_5D33MS_S10:
	
COUNT_DLYCNT_S10:
.IF (C_DLYCNT0_ENABLE .EQ. 1)
	LDA	WB_DLYCNT0
	ORA	WB_DLYCNT0+1
	BEQ	COUNT_DLYCNT_S20
	INC	WB_DLYCNT0
	BNE	COUNT_DLYCNT_S20
	INC	WB_DLYCNT0+1
	BNE	COUNT_DLYCNT_S20
	LDA	#C_CNT0_BIT
	TSB	USER_FLAG_B

COUNT_DLYCNT_S20:
.ENDIF
.IF (C_DLYCNT1_ENABLE .EQ. 1)
	LDA	WB_DLYCNT1
	ORA	WB_DLYCNT1+1
	BEQ	COUNT_DLYCNT_S30
	INC	WB_DLYCNT1
	BNE	COUNT_DLYCNT_S30
	INC	WB_DLYCNT1+1
	BNE	COUNT_DLYCNT_S30
	LDA	#C_CNT1_BIT
	TSB	USER_FLAG_B

COUNT_DLYCNT_S30:
.ENDIF
.IF (C_DLYCNT2_ENABLE .EQ. 1)
	LDA	WB_DLYCNT2
	ORA	WB_DLYCNT2+1
	BEQ	COUNT_DLYCNT_S31
	INC	WB_DLYCNT2
	BNE	COUNT_DLYCNT_S31
	INC	WB_DLYCNT2+1
	BNE	COUNT_DLYCNT_S31
	LDA	#C_CNT2_BIT
	TSB	USER_FLAG_B

COUNT_DLYCNT_S31:
.ENDIF

.IF ( C_DLYCNT3_ENABLE .EQ. 1 )
	LDA	WB_DLYCNT3
	ORA	WB_DLYCNT3+1
	BEQ	COUNT_DLYCNT_S32
	INC	WB_DLYCNT3
	BNE	COUNT_DLYCNT_S32
	INC	WB_DLYCNT3+1
	BNE	COUNT_DLYCNT_S32
	LDA	#C_CNT3_BIT
	TSB	USER_FLAG_B

COUNT_DLYCNT_S32:
.ENDIF

.IF ( C_DLYCNT4_ENABLE .EQ. 1 )
	LDA	WB_DLYCNT4
	ORA	WB_DLYCNT4+1
	BEQ	COUNT_DLYCNT_S33
	INC	WB_DLYCNT4
	BNE	COUNT_DLYCNT_S33
	INC	WB_DLYCNT4+1
	BNE	COUNT_DLYCNT_S33
	LDA	#C_CNT4_BIT
	TSB	USER_FLAG_B

COUNT_DLYCNT_S33:
.ENDIF

.IF ( C_M1_EN .EQ. 1 )
	LDA	R_M1_DLYCNT
	ORA	R_M1_DLYCNT+1
	BEQ	COUNT_DLYCNT_S40
	INC	R_M1_DLYCNT
	BNE	COUNT_DLYCNT_S40
	INC	R_M1_DLYCNT+1
	BNE	COUNT_DLYCNT_S40
;卡死
;	MR_SET_M1_STOP
;DEBUG

	MR_SET_M1_STOP_W_BUF
	
COUNT_DLYCNT_S40:
.ENDIF

.IFDEF  C_EQU_EN
	LDA	EQU_DLYCNT
	ORA	EQU_DLYCNT+1
	BEQ	COUNT_DLYCNT_S50
	INC	EQU_DLYCNT
	BNE	COUNT_DLYCNT_S50
	INC	EQU_DLYCNT+1
	BNE	COUNT_DLYCNT_S50
;
	MR_DET_EQU_FG
	BEQ	COUNT_DLYCNT_S50 ; not equ; stop timer

	LDA	#C_EQU_CNT_BIT
	TSB	USER_FLAG_B

;	JSR	PLAY_EQU_NEXT
;	BNE	COUNT_DLYCNT_S50
;EQU END
	
COUNT_DLYCNT_S50:
.ENDIF

.IFDEF C_M1_EN
;	JSR	CNT_M1_INV_PROT_DLY;反向保护计时
.ENDIF


;--------------------------------
	JMP	WAITKEY_FXF15_RET
;==================================
;=================================


WAITKEY_42D6MS:
WAITKEY_21D3MS:

WAITKEY_21D3MS_PCC:


;42.6MS REACH
;.IF (External_MIDI_Note .EQ. 1)
;	JSR	NOTEON_CNT
;.ENDIF

;----------------------
	JMP	WK_AUTOCNT
WK_AUTOCNT_RET:


	JMP	WAITKEY_21D3MS_RET
	
;	JMP	WAITKEY_42D6MS_RET

;==================================
;==================================



CHKKEY_INIT:

	LDA	#C_NOP

.IF ( C_KEYCH_MAX .GT. 0 )
	STA	<WB_KEYCH_CODE
.ENDIF

.IF ( C_KEYCH_MAX .GT. 1 )
	STA	<WB_KEYCH_CODE+1
.ENDIF
	
.IF ( C_KEYCH_MAX .GT. 2 )
	STA	<WB_KEYCH_CODE+2
.ENDIF
.IF ( C_KEYCH_MAX .GT. 3 )
	STA	<WB_KEYCH_CODE+3
.ENDIF

	RTS



