;=======================================
;	<< WAITKEY_LIB.ASM >>
;===========================================
;----------------------

	
WAITKEY_FLAG:

	RTS

WAITKEY:
	LDA	#0
	STA	USER_FLAG_A
	STA	USER_FLAG_B
;
WAITKEY_S10:
	MACRO_CLR_WDT
;

	
	MR_TEST_TMG1_GAP_FLAG
	BEQ	WAITKEY_TMG0_RET
	MR_CLR_TMG1_GAP_FLAG

;================================
;2MS
	JMP	WAITKEY_TMG0
WAITKEY_TMG0_RET:
;================================
	
	
	LDA	USER_FLAG_A
	BNE	WAITKEY_FLAG
	LDA	USER_FLAG_B;
	BNE	WAITKEY_FLAG
	
;==============================
	JMP	WAITKEY_CHK
WAITKEY_CHK_RET:
	
;==============================

.IF	(C_SPCH1_ENABLE .EQ. 1)
;CHECK SPCH1 / mixed MS
	LDA	<USER_FLAG10
	BIT	#C_CHK_SPCH1_BIT
	BEQ	WAITKEY_SPCH1END_RET
;
	CHK_BUSY_CH1;
	BNE	WAITKEY_SPCH1END_RET
	
.IF ( C_AUTOSLEEP_WAITKEY_EN .EQ. 1 )
	MR_AUTOSLEEP_SPCH1_FREE
.ENDIF

	LDA	#C_CHK_SPCH1_BIT
	TRB	<USER_FLAG10
;SET FLAG
	LDA	#C_SPCH1_BIT
	TSB	<USER_FLAG_A
	
;==================================
	JMP	WAITKEY_SPCH1END
.ENDIF ; C_SPCH1_ENABLE .EQ. 1
WAITKEY_SPCH1END_RET:
;==================================
	
.IF (C_SPCH2_ENABLE .EQ. 1)
;CHECK SPCH2
	LDA	<USER_FLAG10
	BIT	#C_CHK_SPCH2_BIT
	BEQ	WAITKEY_SPCH2END_RET
;
	CHK_BUSY_CH2
	BNE	WAITKEY_SPCH2END_RET

.IF ( C_AUTOSLEEP_WAITKEY_EN .EQ. 1 )
	MR_AUTOSLEEP_SPCH2_FREE
.ENDIF
	
	LDA	#C_CHK_SPCH2_BIT
	TRB	<USER_FLAG10
;SET FLAG
	LDA	#C_SPCH2_BIT
	TSB	<USER_FLAG_A

;==================================
	JMP	WAITKEY_SPCH2END
.ENDIF ; C_SPCH2_ENABLE .EQ. 1
WAITKEY_SPCH2END_RET:
;==================================

.IF (C_SPCH3_ENABLE .EQ. 1)
;CHECK SPCH3
	LDA	<USER_FLAG10
	BIT	#C_CHECK_SPCH3_BIT
	BEQ	WAITKEY_SPCH3END_RET
;
	CHK_BUSY_CH3
	BNE	WAITKEY_SPCH3END_RET

.IF ( C_AUTOSLEEP_WAITKEY_EN .EQ. 1 )
	MR_AUTOSLEEP_SPCH3_FREE
.ENDIF
	
	LDA	#C_CHECK_SPCH3_BIT
	TRB	<USER_FLAG10
;SET FLAG
	LDA	#C_SPCH3_BIT
	TSB	<USER_FLAG_A

;==================================
	JMP	WAITKEY_SPCH3END
.ENDIF ; C_SPCH3_ENABLE .EQ. 1
WAITKEY_SPCH3END_RET:
;==================================


.IF ( C_MS_ENABLE .EQ. 1 )
;CHECK MS1
	LDA	<USER_FLAG10
	BIT	#C_CHK_MS1_BIT
	BEQ	WAITKEY_MSEND_RET
;
	CHK_BUSY_MS
	BEQ	WAITKEY_MS_FREE
	LDA #B_USER_MS1_BUSY
	BIT <USER_FLAG20
	BEQ	WAITKEY_MS_FREE
	LDA	#1
	BRA	WAITKEY_MSEND_RET
WAITKEY_MS_FREE:


	LDA	#C_CHK_MS1_BIT
	TRB	<USER_FLAG10
;SET FLAG
	LDA	#C_MS1_BIT
	TSB	<USER_FLAG_A
	
;==================================
	JMP	WAITKEY_MSEND
.ENDIF ; C_MS_ENABLE .EQ. 1
WAITKEY_MSEND_RET:
;==================================

	JMP	WAITKEY_EVT
WAITKEY_EVT_RET:
;=============================================
;CHECK (8.192MS \ 5.33MS ) 
	MR_TEST_GAPTIME_FLAG
	BNE	WAITKEY_S100

	JMP	WAITKEY_S10
	
WAITKEY_S100:
	MR_CLR_GAPTIME_FLAG
;
;=============================================
;5.33MS
	JMP	WAITKEY_FXF15
WAITKEY_FXF15_RET:
;=============================================
	

	
;=============================================
;5.33MS
	CLC
	LDA	USER_FLAG10
	ADC	#10H
	STA	USER_FLAG10
	BIT	#40H
	BEQ	WAITKEY_S105
	LDA	#40H
	TRB	<USER_FLAG10	; CLEAR FLAG
	
;	JMP	WAITKEY_42D6MS
;WAITKEY_42D6MS_RET:

	JMP	WAITKEY_21D3MS
WAITKEY_21D3MS_RET:
	
WAITKEY_S105:
;


;	INC	GAP_CNT
;	LDA	GAP_CNT
;	CMP	#16
;	BCC	WAITKEY_S110
;	STZ	GAP_CNT
;;85MS reach
;
;	JMP	WAITKEY_85MS
WAITKEY_85MS_RET:



WAITKEY_S110:

	JMP	WAITKEY_S10
	


;====================================
;====================================
BK0_WAIT_DLYCNT0:
	MACRO_CLR_WDT
;
;
;CHECK 8.192MS/5.33MS
	MR_TEST_GAPTIME_FLAG
	BNE	BK0_WAIT_DLYCNT0_S100
	
	BRA	BK0_WAIT_DLYCNT0

BK0_WAIT_DLYCNT0_S100:
	MR_CLR_GAPTIME_FLAG
;5.33MS
	LDA	WB_DLYCNT0
	ORA	WB_DLYCNT0+1
	BEQ	BK0_WAIT_DLYCNT0_S110
	INC	WB_DLYCNT0
	BNE	BK0_WAIT_DLYCNT0_S110
	INC	WB_DLYCNT0+1
	BNE	BK0_WAIT_DLYCNT0_S110
;	LDA	#CONST_CNT0_BIT
;	TSB	USER_FLAG_B
	RTS
BK0_WAIT_DLYCNT0_S110:
	JMP	BK0_WAIT_DLYCNT0

	
BK0_STOP_ALL:
	MACRO_CHECK_CH1_DISABLE
	MACRO_CHECK_CH2_DISABLE
	MACRO_CHECK_MS_DISABLE
	
.IF( ( C_SPCH1_ENABLE	.EQ.	1 ) .OR. ( C_SPCH2_ENABLE	.EQ.	1 ).OR. ( C_SPCH3_ENABLE	.EQ.	1 ) )
	JMP STOP_ALL
.ENDIF
	RTS	

BK0_STOP_CH1:
.IF	(C_SPCH1_ENABLE .EQ. 1)
	MACRO_CHECK_CH1_DISABLE
	JMP STOP_CH1
.ENDIF	
	RTS	
BK0_STOP_CH2:
.IF	(C_SPCH2_ENABLE .EQ. 1)
	MACRO_CHECK_CH2_DISABLE
	JMP STOP_CH2
.ENDIF
	RTS	
BK0_STOP_CH3:
.IF	(C_SPCH3_ENABLE .EQ. 1)
	MACRO_CHECK_CH3_DISABLE
	JMP STOP_CH3
.ENDIF
	RTS	
BK0_STOP_MS:
.IF	(C_MS_ENABLE .EQ. 1)
	MACRO_CHECK_CH3_DISABLE
	JMP STOP_MS
.ENDIF	
	RTS	



;WAIT_SPCH1_W_CHK:
;	MACRO_CHECK_CH1_ENABLE
;WAIT_SPCH1:
;	JSR	WAITKEY
;WAIT_SPCH1_S10:
;	LDA	USER_FLAG_A
;	BIT	#C_SPCH1_BIT
;	BNE	WAIT_SPCH1_CH1END

;	JMP	WAIT_SPCH1
;WAIT_SPCH1_CH1END:
;	MACRO_CLR_CH1_FLAG

;speech
	RTS

WAIT_SPCH1_W_CHK:
	MACRO_CHECK_CH1_ENABLE
WAIT_SPCH1:
	JSR	WAITKEY
WAIT_SPCH1_S10:
	LDA	USER_FLAG_A
	BIT	#C_SPCH1_BIT
	BNE	WAIT_SPCH1_CH1END

	JMP	WAIT_SPCH1
WAIT_SPCH1_CH1END:
	MACRO_CLR_CH1_FLAG

WAIT_SPCH1_CH1END_S100:; EQU
;SPCH1 END

	RTS
	


.IFDEF C_EQU_EN
;WAIT_EQU_W_CHK:
	MACRO_CHECK_CH1_ENABLE
WAIT_EQU:
	JSR	WAITKEY
WAIT_EQU_S10:
	LDA	USER_FLAG_A
	BIT	#C_SPCH1_BIT
	BNE	WAIT_EQU_CH1END

	JMP	WAIT_EQU
WAIT_EQU_CH1END:
	MACRO_CLR_CH1_FLAG

	MR_DET_EQU_FG
	BNE	WAIT_EQU_CH1END_S100
;speech
	RTS

WAIT_EQU_CH1END_S100:; EQU
	
.IF ( C_EQU_EN .EQ. 1 )	
	JSR	BK0_PLAY_EQU_NEXT
	BNE	WAIT_EQU_CH1END_NEXT ; NEXT
.ENDIF
;EQU END
	MR_NRL_EQU

	RTS
	
WAIT_EQU_CH1END_NEXT:
	JMP	WAIT_EQU_S10


.ENDIF



;=================================================



;==========================================
.IF ( C_MS_ENABLE .EQ. 1 )
CHK_MIDI_STATUS:
	CHK_BUSY_MS
	BEQ	CHK_MIDI_STATUS_FREE
	LDA #B_USER_MS1_BUSY
	BIT <USER_FLAG20
	BEQ	CHK_MIDI_STATUS_FREE
	LDA	#1
	RTS
CHK_MIDI_STATUS_FREE:
	LDA	#0
	RTS
.ENDIF


