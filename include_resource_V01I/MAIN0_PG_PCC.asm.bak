


;LVR+LVD ->SLEEP,不开始功能。

;RESET_F.0=1;LVR
;RESET_F.3=1;POR
;RESET_F.4=1;RESET PIN

POI_USER:

;计算RAM的使用情况
	LDA	#C_USER_RAM_LIMITED
	CMP	#R_USER_STACK_START
	BCC	POI_USER
	SEC
	SBC	#R_USER_STACK_START
	CMP	#C_RESERVE_BYTE_USER_STACK
	BCS	POI_RAM_OK
;

	BRA	POI_USER ; reset
	
POI_RAM_OK:


	LDA	#C_PWON_BP0D
	STA	!BP0D
	LDA	#C_PWON_R_BP0
.IF ( C_R_BP0_USED .EQ. 1 )
	STA	R_BP0
.ENDIF
	STA	!BP0
	
	LDA	#C_PWON_BP1D
	STA	!BP1D
	LDA	#C_PWON_R_BP1
	STA	R_BP1
	STA	!BP1

	.IFDEF	BP2
	LDA	#C_PWON_BP2D
	STA	!BP2D
	LDA	#C_PWON_R_BP2
.IF ( C_R_BP2_USED .EQ. 1 )
	STA	R_BP2
.ENDIF
	STA	!BP2
	.ENDIF
	JSR	BK0_DELAY61440CYCLE

.IF(C_CMPA_EN .EQ. 1)
	JSR	BK0_CMPA_ON
	JSR	FRESH_STS0
.ENDIF ; C_CMPA_EN

POI_WAIT_CPU:
	JSR	BK0_STORE_BPX

	JSR	BK0_DELAY61440CYCLE
	JSR	BK0_DELAY61440CYCLE
	JSR	BK0_DELAY61440CYCLE
	
;CHECK AGAIN
.IF ( C_BP0_STATUS_EN .EQ. 1 )
	LDA	!BP0
	CMP	BP0_STATUS
	BNE	POI_WAIT_CPU
.ENDIF
.IF ( C_BP1_STATUS_EN .EQ. 1 )
	LDA	!BP1
	CMP	BP1_STATUS
	BNE	POI_WAIT_CPU
.ENDIF
.IF ( C_BP2_STATUS_EN .EQ. 1 )
	LDA	!BP2
	CMP	BP2_STATUS
	BNE	POI_WAIT_CPU
.ENDIF


.IF	(C_MS_ENABLE .EQ. 1)
	EN_GLOBALVOL_VOL_MIDI1
.ENDIF

.IF	(C_SPCH1_ENABLE .EQ. 1)
	.IF ( Speech_Volume_Adjustment .EQ. 1 )
	EN_GLOBALVOL_VOL1
	.ENDIF
.ENDIF
	
.IF	(C_SPCH2_ENABLE .EQ. 1)
	.IF ( Speech_Volume_Adjustment .EQ. 1 )
	EN_GLOBALVOL_VOL2
	.ENDIF	
.ENDIF	

	.IF ( Speech_Volume_Adjustment .EQ. 1 )
	LDA	#C_DEFAULT_TPO_IDX|C_DEFAULT_VOL_IDX
	STA	VOL_TPO_IDX
	JSR	BK0_SET_VOL
	.ENDIF	

	JSR	CHKKEY_INIT
;========================================================
;========================================================
PCC_POI_MODULE:



;========================================================
	
.IF(C_CMPA_EN .EQ. 1)
;CHECK CMPA
	JSR	STORE_STS0
	
	LDA	#B_CHK_STS0_ST
	BIT	<R_CHK_STS0_ST
	BNE	POI_LVD_S10
;0: BP10<BP11

.IF ( DEBUG_CMPA .EQ. 1 )
	BRA POI_LVD_S10
.ENDIF ; DEBUG_CMPA
	
	JMP	ENTER_STOP

POI_LVD_S10:
.ENDIF ; C_CMPA_EN

;CHECK LVR
.IF ( C_CHK_LVR_EN .EQ. 1 )
	LDA	RESET_F
	AND	#11001B
	CMP	#00001B
	BNE	POI_LVR_S10
	LDA	#0FFH
	STA	RESET_F
;LVR->ENTER STOP
	JMP	ENTER_STOP

POI_LVR_S10:
	LDA	#0FFH
	STA	RESET_F
.ENDIF

;===============================
;CHECK TEST MODE
;===============================
PCC_POI_CHKTEST:



;========================================

	
;===============================
;CHECK TEST MODE end
;=======================================


;not TEST MODE
;========================================
	JMP	ENTER_STOP



;=======================================
MAIN_WAKEUP: ; wakeup from sleep

	MACRO_INT_ENABLE FXF15_INT_BIT
.IF ( C_TMG0_EN .EQ. 1 )
	JSR	BK0_START_TMG0_0625MS
.ENDIF

	LDA	#C_WAKEUP_BP0D
	STA	!BP0D
	LDA	#C_WAKEUP_R_BP0
.IF ( C_R_BP0_USED .EQ. 1 )
	STA	R_BP0
.ENDIF
	STA	!BP0
	
	LDA	#C_WAKEUP_BP1D
	STA	!BP1D
	LDA	#C_WAKEUP_R_BP1
	STA	R_BP1
	STA	!BP1

	.IFDEF	BP2
	LDA	#C_WAKEUP_BP2D
	STA	!BP2D
	LDA	#C_WAKEUP_R_BP2
.IF ( C_R_BP2_USED .EQ. 1 )
	STA	R_BP2
.ENDIF
	STA	!BP2
	.ENDIF
;if some IO change to input from output ;->;DELAY1MS
;	JSR	BK0_DELAY1MS
;	JSR	BK0_STORE_BPX_WO_BOND_PWOFF ;V36

	MR_SET_AUTOCNT1
	
PCC_MAIN_WAKEUP:
;

;=================================
	JMP	M0_WAKEUP

; other key wakeup
;wakeup From key or mode key 
	JMP	WAKEUP_LOOP_PRE
;=============================
; general key(with check mode key) wakeup / main loop mode key interrupt
;=============================
;
;MAIN_MODE_KEY:
;
;	JMP	MAIN_WAKEUP_S30
	
;=======================================
; 	wakeup From key or mode key
; need to check All key before mode enter
;=======================================
WAKEUP_LOOP_PRE:
;
;MODE SWITCH ONLY SET STATUS
;

WAKEUP_LOOP:
	JSR	WAITKEY
WAKEUP_LOOP_S10:
	LDA	USER_FLAG_A
	BIT	#C_KEYCH0_BIT
	BNE	WAKEUP_LOOP_KEYCH0_J1
	BIT	#C_KEYCH1_BIT
	BNE	WAKEUP_LOOP_KEYCH1_J1
	BIT	#C_KEYCH2_BIT
	BNE	WAKEUP_LOOP_KEYCH2_J1
	BIT	#C_KEYCH3_BIT
	BNE	WAKEUP_LOOP_KEYCH3_J1
	BIT	#C_SPCH1_BIT
	BNE	WAKEUP_LOOP_CH1END_J1
	BIT	#C_SPCH2_BIT
	BNE	WAKEUP_LOOP_CH2END_J1
	
	LDA	USER_FLAG_B
	BIT	#C_CNT0_BIT
	BNE	WAKEUP_LOOP_CNT0
	BIT	#C_CNT1_BIT
	BNE	WAKEUP_LOOP_CNT1
	BIT	#C_AUTO_CNT_BIT
	BNE	WAKEUP_LOOP_AUTOCNT_J1
	
	JMP	WAKEUP_LOOP
WAKEUP_LOOP_KEYCH0_J1:
	JMP	WAKEUP_LOOP_KEYCH0
WAKEUP_LOOP_KEYCH1_J1:
	JMP	WAKEUP_LOOP_KEYCH1
WAKEUP_LOOP_KEYCH2_J1:
	JMP	WAKEUP_LOOP_KEYCH2
WAKEUP_LOOP_KEYCH3_J1:
	JMP	WAKEUP_LOOP_KEYCH3
WAKEUP_LOOP_AUTOCNT_J1:
	JMP WAKEUP_LOOP_AUTOCNT
WAKEUP_LOOP_CH1END_J1:
	JMP WAKEUP_LOOP_CH1END
WAKEUP_LOOP_CH2END_J1:
	JMP WAKEUP_LOOP_CH2END
WAKEUP_LOOP_CNT0:; IDLE TIMER
	MACRO_CLR_CNT0_FLAG
;IDLE
;	MR_RESET_IDLE
	

	JMP	WAKEUP_LOOP_S10
WAKEUP_LOOP_CNT1:
	MACRO_CLR_CNT1_FLAG
;

	JMP	WAKEUP_LOOP_S10
WAKEUP_LOOP_CNT2:
	MACRO_CLR_CNT2_FLAG
	
	JMP	WAKEUP_LOOP_S10
WAKEUP_LOOP_CNT3:
	MACRO_CLR_CNT3_FLAG
	
	JMP	WAKEUP_LOOP_S10
WAKEUP_LOOP_CH1END:
	MACRO_CLR_CH1_FLAG
;
	
	JMP	ENTER_STOP
	
WAKEUP_LOOP_CH2END:
	MACRO_CLR_CH2_FLAG
;
	
	JMP	WAKEUP_LOOP_S10

WAKEUP_LOOP_AUTOCNT:
	MACRO_CLR_AUTOCNT_FLAG
;

	JMP	ENTER_STOP
	
WAKEUP_LOOP_KEYCH1:
	MACRO_CLR_KEYCH1_FLAG
;

	JMP	WAKEUP_ANYKEY
	
WAKEUP_LOOP_KEYCH2:
	MACRO_CLR_KEYCH2_FLAG
;MODE change
	
	JMP	WAKEUP_LOOP_S10
	
WAKEUP_LOOP_KEYCH3:
	MACRO_CLR_KEYCH3_FLAG
	
	JMP	WAKEUP_LOOP_S10

WAKEUP_LOOP_KEYCH0:
	MACRO_CLR_KEYCH0_FLAG
; key channel 0
;check wakeup key
	
	JMP	WAKEUP_ANYKEY
;======================================
;=========================================
WAKEUP_ANYKEY:
	
;==================================================
PCC_WAKEUP_ANYKEY:




;==================================================

.IF (C_CHK1KEY_EN1 .EQ. 1) .OR. (C_CHK1KEY_EN2 .EQ. 1)

.ENDIF

	.IF ( C_LED_MATRIX_EN .EQ. 1 )
	JSR	BK0_LED_MATRIX_RAM_INIT
	.ENDIF
	
	MACRO_INT_ENABLE FXF15_INT_BIT
	
.IF ( C_TMG0_EN .EQ. 1 )
	JSR	BK0_START_TMG0_0625MS
.ENDIF

	LDA	#C_WAKEUP_BP0D
	STA	!BP0D
	LDA	#C_WAKEUP_R_BP0
.IF ( C_R_BP0_USED .EQ. 1 )
	STA	R_BP0
.ENDIF
	STA	!BP0
	
	LDA	#C_WAKEUP_BP1D
	STA	!BP1D
	LDA	#C_WAKEUP_R_BP1
	STA	R_BP1
	STA	!BP1

	.IFDEF	BP2
	LDA	#C_WAKEUP_BP2D
	STA	!BP2D
	LDA	#C_WAKEUP_R_BP2
.IF ( C_R_BP2_USED .EQ. 1 )
	STA	R_BP2
.ENDIF
	STA	!BP2
	.ENDIF
	
	MR_SET_AUTOCNT1

	JMP	M0_PRE ; goto mode0


;=======================================
;=======================================
