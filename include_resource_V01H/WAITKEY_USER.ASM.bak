;=======================================
;	<< WAITKEY_USER.ASM >>
;===========================================
;


BK0_WAITKEY_LOOP_CHK:

;=========================================
;//PCCS-BK0_WAITKEY_LOOP_CHK

;//PCCE-BK0_WAITKEY_LOOP_CHK


	JMP	BK0_WAITKEY_LOOP_CHK_RET

;===================================

BK0_WAITKEY_TMG0:
;//PCCS-BK0_WAITKEY_TMG0

;//PCCE-BK0_WAITKEY_TMG0

	JMP	BK0_WAITKEY_TMG0_RET

;===============================================

;=================================
BK0_WAITKEY_SPCH1END:
;//PCCS-BK0_WAITKEY_SPCH1END

;//PCCE-BK0_WAITKEY_SPCH1END
	
	JMP	BK0_WAITKEY_SPCH1END_RET

;=================================
BK0_WAITKEY_SPCH2END:
;//PCCS-BK0_WAITKEY_SPCH2END

;//PCCE-BK0_WAITKEY_SPCH2END

	JMP	BK0_WAITKEY_SPCH2END_RET

;==============================
BK0_WAITKEY_MSEND:
;//PCCS-BK0_WAITKEY_MSEND

;//PCCE-BK0_WAITKEY_MSEND

	JMP	BK0_WAITKEY_MSEND_RET

;=================================
BK0_WAITKEY_EVT:
;//PCCS-BK0_WAITKEY_EVT

;//PCCE-BK0_WAITKEY_EVT
	

	JMP	BK0_WAITKEY_EVT_RET
	
;=================================

;==================================
BK0_WAITKEY_5D33MS:
;5.33MS

.IFDEF  C_CHKMODE_EN  
;	JSR	BK0_CHK_MODE
.ENDIF

.IFDEF C_WIPER_EN 
;扫描定位点
;	JSR	CHK_WIPER0
.ENDIF
;.IF (C_BUZZER_ENABLE .EQ. 1)
;	JSR	CHK_BUZZER
;.ENDIF
;Check Single key
.IFDEF C_CHKSKEY_EN
	JSR	BK0_SCAN_S_KEY
.ENDIF
;	JSR	CHK_STS0
	
;-----------------------
.IFDEF C_CHK1KEY_EN
;扫描1键
	LDA	#C_NOP
	STA	<R_CHK1KEY_PRESS
	JSR	SCAN_LINE1
	JSR CHK1KEY
.ENDIF

.IFDEF  C_CHKMKEY_EN 
	JSR	BK0_SCAN_KEY_4CH ;CHECK MATRIX key
	JMP	BK0_SCAN_KEY_4CH_USER
BK0_SCAN_KEY_4CH_USER_RET:
.ENDIF



BK0_WAITKEY_5D33MS_S10:
	
BK0_COUNT_DLYCNT_S10:
.IF (C_DLYCNT0_ENABLE .EQ. 1)
	LDA	WB_DLYCNT0
	ORA	WB_DLYCNT0+1
	BEQ	BK0_COUNT_DLYCNT_S20
	INC	WB_DLYCNT0
	BNE	BK0_COUNT_DLYCNT_S20
	INC	WB_DLYCNT0+1
	BNE	BK0_COUNT_DLYCNT_S20
	LDA	#C_CNT0_BIT
	TSB	USER_FLAG_B

BK0_COUNT_DLYCNT_S20:
.ENDIF
.IF (C_DLYCNT1_ENABLE .EQ. 1)
	LDA	WB_DLYCNT1
	ORA	WB_DLYCNT1+1
	BEQ	BK0_COUNT_DLYCNT_S30
	INC	WB_DLYCNT1
	BNE	BK0_COUNT_DLYCNT_S30
	INC	WB_DLYCNT1+1
	BNE	BK0_COUNT_DLYCNT_S30
	LDA	#C_CNT1_BIT
	TSB	USER_FLAG_B

BK0_COUNT_DLYCNT_S30:
.ENDIF
.IF (C_DLYCNT2_ENABLE .EQ. 1)
	LDA	WB_DLYCNT2
	ORA	WB_DLYCNT2+1
	BEQ	BK0_COUNT_DLYCNT_S31
	INC	WB_DLYCNT2
	BNE	BK0_COUNT_DLYCNT_S31
	INC	WB_DLYCNT2+1
	BNE	BK0_COUNT_DLYCNT_S31
	LDA	#C_CNT2_BIT
	TSB	USER_FLAG_B

BK0_COUNT_DLYCNT_S31:
.ENDIF

.IF ( C_DLYCNT3_ENABLE .EQ. 1 )
	LDA	WB_DLYCNT3
	ORA	WB_DLYCNT3+1
	BEQ	BK0_COUNT_DLYCNT_S32
	INC	WB_DLYCNT3
	BNE	BK0_COUNT_DLYCNT_S32
	INC	WB_DLYCNT3+1
	BNE	BK0_COUNT_DLYCNT_S32
	LDA	#C_CNT3_BIT
	TSB	USER_FLAG_B

BK0_COUNT_DLYCNT_S32:
.ENDIF

.IF ( C_DLYCNT4_ENABLE .EQ. 1 )
	LDA	WB_DLYCNT4
	ORA	WB_DLYCNT4+1
	BEQ	BK0_COUNT_DLYCNT_S33
	INC	WB_DLYCNT4
	BNE	BK0_COUNT_DLYCNT_S33
	INC	WB_DLYCNT4+1
	BNE	BK0_COUNT_DLYCNT_S33
	LDA	#C_CNT4_BIT
	TSB	USER_FLAG_B

BK0_COUNT_DLYCNT_S33:
.ENDIF

.IF ( C_M1_EN .EQ. 1 )
	LDA	R_M1_DLYCNT
	ORA	R_M1_DLYCNT+1
	BEQ	BK0_COUNT_DLYCNT_S40
	INC	R_M1_DLYCNT
	BNE	BK0_COUNT_DLYCNT_S40
	INC	R_M1_DLYCNT+1
	BNE	BK0_COUNT_DLYCNT_S40
;卡死
;	MR_SET_M1_STOP
;DEBUG

	MR_SET_M1_STOP_W_BUF
	
BK0_COUNT_DLYCNT_S40:
.ENDIF

.IF ( C_EQU_EN .EQ. 1 )
	LDA	EQU_DLYCNT
	ORA	EQU_DLYCNT+1
	BEQ	BK0_COUNT_DLYCNT_S50
	INC	EQU_DLYCNT
	BNE	BK0_COUNT_DLYCNT_S50
	INC	EQU_DLYCNT+1
	BNE	BK0_COUNT_DLYCNT_S50
;
	MR_DET_EQU_FG
	BEQ	BK0_COUNT_DLYCNT_S50 ; not equ; stop timer

	LDA	#C_EQU_CNT_BIT
	TSB	USER_FLAG_B

;	JSR	BK0_PLAY_EQU_NEXT
;	BNE	BK0_COUNT_DLYCNT_S50
;EQU END
	
BK0_COUNT_DLYCNT_S50:
.ENDIF

.IF ( C_M1_EN .EQ. 1 )
;	JSR	BK0_CNT_M1_INV_PROT_DLY;反向保护计时
.ENDIF


;--------------------------------
	JMP	BK0_WAITKEY_5D33MS_RET
;==================================
;=================================


BK0_WAITKEY_42D6MS:
BK0_WAITKEY_21D3MS:
;42.6MS REACH
;.IF (External_MIDI_Note .EQ. 1)
;	JSR	BK0_NOTEON_CNT
;.ENDIF

;----------------------
	JMP	WK_AUTOCNT
WK_AUTOCNT_RET:


	JMP	BK0_WAITKEY_21D3MS_RET
	
;	JMP	BK0_WAITKEY_42D6MS_RET

;==================================
BK0_WAITKEY_85MS:
;85MS reach
;.IF (C_REC_ENABLE .EQ. 1) .OR. (C_DRUMP1_ENABLE .EQ. 1)
;	JSR	BK0_REC_MODE_DLYCNT ; 85MS
;.ENDIF

;.IF (External_MIDI_Note .EQ. 1)
;	JSR	NOTEON_TAIL_DLYCNT ; 85MS
;.ENDIF

;
	JMP	BK0_WAITKEY_85MS_RET



BK0_CHKKEY_INIT:

	LDA	#C_NOP

.IF ( C_KEYCH_MAX .GT. 0 )
	STA	<WB_KEYCH_CODE
.ENDIF

.IF ( C_KEYCH_MAX .GT. 1 )
	STA	<WB_KEYCH_CODE+1
.ENDIF
	
.IF ( C_KEYCH_MAX .GT. 2 )
	STA	<WB_KEYCH_CODE+2
.ENDIF
.IF ( C_KEYCH_MAX .GT. 3 )
	STA	<WB_KEYCH_CODE+3
.ENDIF

	RTS



