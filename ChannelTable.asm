	CHIP		W6502BASED
	SYMBOLS
	LINEAR		ON

	;*.LIC
	INCLUDE		N588H_SYS_DEF_EQU.INI

	INCLUDE		CONFIGURATION_PUBLIC.INI	;generated by WIDE according to user configuration
	INCLUDE		CONFIGURATION.INI		;generated by WIDE according to user configuration
	INCLUDE 	RAMVAR_PUBLIC.INI		;generate by WIDE according to configuration.ini
	INCLUDE 	RAMVAR.INI			;generate by WIDE according to configuration.ini
;	.IF (WITH_SP .EQ. 1).OR.(WITH_MS .EQ. 1).OR.(WITH_EVO .EQ. 1)
	INCLUDE		SynthConstant_PUBLIC.INI
	INCLUDE		SynthConstant.INI
;	INCLUDE		CommLibAPIs.asm		;for PSF kernel/user need APIs
;	.ENDIF
;==========================================================================
;	LIBRARY RAM USED SECTION
;==========================================================================
	LIBRARY_USED_RAM: SECTION
	ORG 0000H
LIBRARY_RAM DS USER_START
	ENDS
	
	STACK_RAM: SECTION
STACK_USED_RAM DS WITH_STACK_SIZE
	ENDS

	LIBRARY_CODE: SECTION
	ORG	0000H

	LONGA OFF
	LONGI OFF
	
	.IFNDEF WITH_USER_PLAY
	.IF (WITH_SP .EQ. 1).OR.(WITH_MS .EQ. 1).OR.(WITH_EVO .EQ. 1)
;==============================================================================
; This table is used for seperate speech | melody modules. I-f user use speech 
; only or melody only, the unused melody or speech module will not be linked
; into execution file.
;==============================================================================
	.IF (WITH_CMD .EQ. 0)
	PUBLIC		INIT_PROC_TABLE
INIT_PROC_TABLE:
	.IF (WITH_SP .EQ. 1H)
	EXTERN	SPEECH_INIT
	EXTERN	SPEECH_INIT_CONTINUE
	DW SPEECH_INIT
	DW SPEECH_INIT_CONTINUE
	.ELSE
	DW 0000H
	DW 0000H
	.ENDIF

	.IF (WITH_MS .EQ. 1H)
	EXTERN	MIDI_INIT
	DW MIDI_INIT
	.ELSE
	DW 0000H
	.ENDIF
	
	.IF (WITH_EVO .EQ. 1H)
	EXTERN	EVO_INIT
	DW EVO_INIT
	.ELSE
	DW 0000H
	.ENDIF
	.ENDIF
	
;==============================================================================
; Each channel has a synth start address table to record the start address of 
; synth procedure for all supported formats.
; This is a table of table to store synth start address table of all channels.
;==============================================================================
	PUBLIC		SPEECH_SYNTH_START_TABLE
SPEECH_SYNTH_START_TABLE:
	; [Add] N588J chip series
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
		.IF (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0))||(WITH_SP_MIDI_SIMUL .EQ. 0))
			.IF (WITH_ISR_VS1A .EQ. 1H)
			DW SPEECH_SYNTH_START_TABLE_VS1A
			.ENDIF
			
			.IF (WITH_ISR_VS2A .EQ. 1H)
			DW SPEECH_SYNTH_START_TABLE_VS2A
			.ENDIF
			
			.IF (WITH_ISR_VS0A .EQ. 1H)
			DW SPEECH_SYNTH_START_TABLE_VS0A
			.ENDIF
		.ELSE
			.IF (WITH_ISR_VS0A .EQ. 1H)
			DW SPEECH_SYNTH_START_TABLE_VS0A
			.ENDIF
	
			.IF (WITH_ISR_VS1A .EQ. 1H)
			DW SPEECH_SYNTH_START_TABLE_VS1A
			.ENDIF
	
			.IF (WITH_ISR_VS2A .EQ. 1H)
			DW SPEECH_SYNTH_START_TABLE_VS2A
			.ENDIF
		.ENDIF
	.ENDIF
;-------------------------------------------------------------------------------------------
;-------------------------------------------------------------------------------------------
	PUBLIC		SPEECH_SYNTH_START_EXT_TABLE
SPEECH_SYNTH_START_EXT_TABLE:
;;Modify by CWChang for IOSPI Library 2013/01/18
.IF (WITH_SIM_SP .EQ. 1) .or.(WITH_SPI_GPIO .EQ. 1)
	.IF (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0))||(WITH_SP_MIDI_SIMUL .EQ. 0))
		.IF (WITH_ISR_VS1A .EQ. 1)
		DW SPEECH_SYNTH_START_TABLE_EXT_VS1A
		.ENDIF
		
		.IF (WITH_SPI_GPIO .EQ. 0)
			.IF (WITH_ISR_VS2A .EQ. 1)
			DW SPEECH_SYNTH_START_TABLE_EXT_VS2A
			.ENDIF
			
			.IF (WITH_ISR_VS0A .EQ. 1)
			DW SPEECH_SYNTH_START_TABLE_VS0A
			.ENDIF
		.ENDIF
	.ELSE
		.IF (WITH_ISR_VS0A .EQ. 1H)
		DW SPEECH_SYNTH_START_TABLE_EXT_VS0A
		.ENDIF

		.IF (WITH_SPI_GPIO .EQ. 0)
			.IF (WITH_ISR_VS1A .EQ. 1H)
			DW SPEECH_SYNTH_START_TABLE_EXT_VS1A
			.ENDIF
	
			.IF (WITH_ISR_VS2A .EQ. 1H)
			DW SPEECH_SYNTH_START_TABLE_VS2A
			.ENDIF
		.ENDIF
	.ENDIF
.ENDIF
;==============================================================================
; Macro to define a synth start address table for a channel.
;==============================================================================
SPEECH_SYNTH_START_TABLE_EX	MACRO CHANNEL
SPEECH_SYNTH_START_TABLE|CHANNEL:
	.IF (WITH_APM .EQ. 1)
	.IF (WITH|CHANNEL|_APM .EQ. 1H)
	EXTERN APM_READ_HEADER|CHANNEL
	DW APM_READ_HEADER|CHANNEL
	.ELSE
	DW 0000H
	.ENDIF
	.ENDIF

	.IF (WITH_PC8 .EQ. 1)
	.IF (WITH|CHANNEL|_PC8 .EQ. 1H)
	EXTERN PC8_READ_BYTE|CHANNEL
	DW PC8_READ_BYTE|CHANNEL
	.ELSE
	DW 0000H
	.ENDIF
	.ENDIF

	.IF (WITH_P10 .EQ. 1)
	.IF (WITH|CHANNEL|_P10 .EQ. 1H)
	EXTERN P10_READ_BYTE|CHANNEL
	DW P10_READ_BYTE|CHANNEL
	.ELSE
	DW 0000H
	.ENDIF
	.ENDIF
	
	;Add By TSH
	.IF (WITH_SIL .EQ. 1)
	.IF (WITH|CHANNEL|_SIL .EQ. 1H)
	EXTERN SIL_READ_HEADER|CHANNEL
	DW SIL_READ_HEADER|CHANNEL
	.ELSE
	DW 0000H
	.ENDIF
	.ENDIF
	
	.IF (WITH_MDM .EQ. 1)
	.IF (WITH|CHANNEL|_MDM .EQ. 1H)
	EXTERN MDM_READ_HEADER|CHANNEL
	DW MDM_READ_HEADER|CHANNEL
	.ELSE
	DW 0000H
	.ENDIF
	.ENDIF

	.IF (WITH_EMM .EQ. 1)
	.IF (WITH|CHANNEL|_EMM .EQ. 1H)
	EXTERN EMM_READ_HEADER|CHANNEL
	DW EMM_READ_HEADER|CHANNEL
	.ELSE
	DW 0000H
	.ENDIF
	.ENDIF

	.IF (WITH_LP8 .EQ. 1)
	.IF (WITH|CHANNEL|_LP8 .EQ. 1H)
	EXTERN LP8_READ_BYTE|CHANNEL
	DW LP8_READ_BYTE|CHANNEL
	.ELSE
	DW 0000H
	.ENDIF
	.ENDIF

	.IF (WITH_MD6 .EQ. 1)
	.IF (WITH|CHANNEL|_MD6 .EQ. 1H)
	EXTERN MD6_READ_HEADER|CHANNEL
	DW MD6_READ_HEADER|CHANNEL
	.ELSE
	DW 0000H
	.ENDIF
	.ENDIF

	.IF (WITH_E2A .EQ. 1)
	.IF (WITH|CHANNEL|_E2A .EQ. 1H)
	EXTERN E2A_READ_HEADER|CHANNEL
	DW E2A_READ_HEADER|CHANNEL
	.ELSE
	DW 0000H
	.ENDIF
	.ENDIF

	.IF (WITH_VC4 .EQ. 1)
	.IF (WITH|CHANNEL|_VC4 .EQ. 1H)
	EXTERN VC4_READ_HEADER|CHANNEL
	DW VC4_READ_HEADER|CHANNEL
	.ELSE
	DW 0000H
	.ENDIF
	.ENDIF

	.IF (WITH_MD4 .EQ. 1)
	.IF (WITH|CHANNEL|_MD4 .EQ. 1H)
	EXTERN MD4_READ_HEADER|CHANNEL
	DW MD4_READ_HEADER|CHANNEL
	.ELSE
	DW 0000H
	.ENDIF
	.ENDIF
	
	.IF (WITH_MDR .EQ. 1)
	.IF (WITH|CHANNEL|_MDR .EQ. 1H)
	EXTERN MDR_READ_HEADER|CHANNEL
	DW MDR_READ_HEADER|CHANNEL
	.ELSE
	DW 0000H
	.ENDIF
	.ENDIF
	
	.IF (WITH_NM4 .EQ. 1)
	.IF (WITH|CHANNEL|_NM4 .EQ. 1H)
	EXTERN NM4_READ_HEADER_INSERT|CHANNEL
	DW NM4_READ_HEADER_INSERT|CHANNEL
	.ELSE
	DW 0000H
	.ENDIF
	.ENDIF
	
	.IF (WITH_NM4S .EQ. 1)
	.IF (WITH|CHANNEL|_NM4S .EQ. 1H)
	EXTERN NM4S_READ_HEADER_INSERT|CHANNEL
	DW NM4S_READ_HEADER_INSERT|CHANNEL
	.ELSE
	DW 0000H
	.ENDIF
	.ENDIF
	ENDM

SPEECH_SYNTH_START_TABLE_EXT_EX	MACRO CHANNEL
SPEECH_SYNTH_START_TABLE_EXT|CHANNEL:
; [Add] N588J chip series
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
	.IF (WITH_APM .EQ. 1)
	.IF (WITH|CHANNEL|_APM .EQ. 1H)
	EXTERN APM_READ_HEADER_EXT|CHANNEL
	DW APM_READ_HEADER_EXT|CHANNEL
	.ELSE
	DW 0000H
	.ENDIF
	.ENDIF

	.IF (WITH_PC8 .EQ. 1)
	.IF (WITH|CHANNEL|_PC8 .EQ. 1H)
	EXTERN PC8_READ_BYTE_EXT|CHANNEL
	DW PC8_READ_BYTE_EXT|CHANNEL
	.ELSE
	DW 0000H
	.ENDIF
	.ENDIF

	.IF (WITH_P10 .EQ. 1)
	.IF (WITH|CHANNEL|_P10 .EQ. 1H)
	EXTERN P10_READ_BYTE_EXT|CHANNEL
	DW P10_READ_BYTE_EXT|CHANNEL
	.ELSE
	DW 0000H
	.ENDIF
	.ENDIF
	
	;Add By TSH
	.IF (WITH_SIL .EQ. 1)
	.IF (WITH|CHANNEL|_SIL .EQ. 1H)
	EXTERN SIL_READ_HEADER|CHANNEL
	DW SIL_READ_HEADER|CHANNEL
	.ELSE
	DW 0000H
	.ENDIF
	.ENDIF
	
	.IF (WITH_MDM .EQ. 1)
	.IF (WITH|CHANNEL|_MDM .EQ. 1H)
	EXTERN MDM_READ_HEADER_EXT|CHANNEL
	DW MDM_READ_HEADER_EXT|CHANNEL
	.ELSE
	DW 0000H
	.ENDIF
	.ENDIF

	.IF (WITH_EMM .EQ. 1)
	.IF (WITH|CHANNEL|_EMM .EQ. 1H)
	EXTERN EMM_READ_HEADER_EXT|CHANNEL
	DW EMM_READ_HEADER_EXT|CHANNEL
	.ELSE
	DW 0000H
	.ENDIF
	.ENDIF

	.IF (WITH_LP8 .EQ. 1)
	.IF (WITH|CHANNEL|_LP8 .EQ. 1H)
	EXTERN LP8_READ_BYTE_EXT|CHANNEL
	DW LP8_READ_BYTE_EXT|CHANNEL
	.ELSE
	DW 0000H
	.ENDIF
	.ENDIF

	.IF (WITH_MD6 .EQ. 1)
	.IF (WITH|CHANNEL|_MD6 .EQ. 1H)
	EXTERN MD6_READ_HEADER_EXT|CHANNEL
	DW MD6_READ_HEADER_EXT|CHANNEL
	.ELSE
	DW 0000H
	.ENDIF
	.ENDIF

	.IF (WITH_E2A .EQ. 1)
	.IF (WITH|CHANNEL|_E2A .EQ. 1H)
	EXTERN E2A_READ_HEADER_EXT|CHANNEL
	DW E2A_READ_HEADER_EXT|CHANNEL
	.ELSE
	DW 0000H
	.ENDIF
	.ENDIF

	.IF (WITH_VC4 .EQ. 1)
	.IF (WITH|CHANNEL|_VC4 .EQ. 1H)
	EXTERN VC4_READ_HEADER|CHANNEL
	;DW VC4_READ_HEADER_EXT|CHANNEL
	DW VC4_READ_HEADER|CHANNEL
	.ELSE
	DW 0000H
	.ENDIF
	.ENDIF
	
	.IF (WITH_MD4 .EQ. 1)
	.IF (WITH|CHANNEL|_MD4 .EQ. 1H)
	EXTERN MD4_READ_HEADER_EXT|CHANNEL
	DW MD4_READ_HEADER_EXT|CHANNEL
	.ELSE
	DW 0000H
	.ENDIF
	.ENDIF
	
	.IF (WITH_MDR .EQ. 1)
	.IF (WITH|CHANNEL|_MDR .EQ. 1H)
	EXTERN MDR_READ_HEADER|CHANNEL
	DW MDR_READ_HEADER|CHANNEL
	.ELSE
	DW 0000H
	.ENDIF
	.ENDIF
	
	.IF (WITH_NM4 .EQ. 1)
	.IF (WITH|CHANNEL|_NM4 .EQ. 1H)
	EXTERN NM4_READ_HEADER_INSERT_EXT|CHANNEL
	DW NM4_READ_HEADER_INSERT_EXT|CHANNEL
	.ELSE
	DW 0000H
	.ENDIF
	.ENDIF
	
	.IF (WITH_NM4S .EQ. 1)
	.IF (WITH|CHANNEL|_NM4S .EQ. 1H)
	EXTERN NM4S_READ_HEADER_INSERT_EXT|CHANNEL
	DW NM4S_READ_HEADER_INSERT_EXT|CHANNEL
	.ELSE
	DW 0000H
	.ENDIF
	.ENDIF
.ENDIF
	ENDM	
;==============================================================================
; Define synth start address tables for all channels.
;==============================================================================
	.IF (WITH_ISR_VS0A .EQ. 1H)
	SPEECH_SYNTH_START_TABLE_EX _VS0A
	.ENDIF

	.IF (WITH_ISR_VS0B .EQ. 1H)
	SPEECH_SYNTH_START_TABLE_EX _VS0B
	.ENDIF

	.IF (WITH_ISR_VS1A .EQ. 1H)
	SPEECH_SYNTH_START_TABLE_EX _VS1A
	.ENDIF

	.IF (WITH_ISR_VS1B .EQ. 1H)
	SPEECH_SYNTH_START_TABLE_EX _VS1B
	.ENDIF

	.IF (WITH_ISR_VS2A .EQ. 1H)
	SPEECH_SYNTH_START_TABLE_EX _VS2A
	.ENDIF

	.IF (WITH_ISR_VS2B .EQ. 1H)
	SPEECH_SYNTH_START_TABLE_EX _VS2B
	.ENDIF
	

  ;;Modify by CWChang for IOSPI Library 2013/01/18
  .IF (WITH_SIM_SP .EQ. 1) .or.(WITH_SPI_GPIO .EQ. 1)
	.IF (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0))||(WITH_SP_MIDI_SIMUL .EQ. 0))
		.IF (WITH_ISR_VS1A .EQ. 1)
		SPEECH_SYNTH_START_TABLE_EXT_EX _VS1A
		.ENDIF
		
		.IF (WITH_SPI_GPIO .EQ. 0)
		.IF (WITH_ISR_VS2A .EQ. 1)
			SPEECH_SYNTH_START_TABLE_EXT_EX _VS2A
			.ENDIF
			
			.IF (WITH_ISR_VS0A .EQ. 1)
			SPEECH_SYNTH_START_TABLE_EXT_EX _VS0A
			.ENDIF
		.ENDIF
	.ELSE
		.IF (WITH_ISR_VS0A .EQ. 1H)
		SPEECH_SYNTH_START_TABLE_EXT_EX _VS0A
		.ENDIF

		.IF (WITH_SPI_GPIO .EQ. 0)
			.IF (WITH_ISR_VS1A .EQ. 1H)
	   		SPEECH_SYNTH_START_TABLE_EXT_EX _VS1A 
			.ENDIF
	
			.IF (WITH_ISR_VS2A .EQ. 1H)
			SPEECH_SYNTH_START_TABLE_EXT_EX _VS2A
			.ENDIF
		.ENDIF
	.ENDIF 
	;;.IF (WITH_ISR_VS0A .EQ. 1H)
	;;SPEECH_SYNTH_START_TABLE_EXT_EX _VS0A
	;;.ENDIF
	;;.IF (WITH_ISR_VS1A .EQ. 1H)
	;;SPEECH_SYNTH_START_TABLE_EXT_EX _VS1A
	;;.ENDIF
	;;.IF (WITH_ISR_VS2A .EQ. 1H)
	;;SPEECH_SYNTH_START_TABLE_EXT_EX _VS2A
	;;.ENDIF
		
	.ENDIF
;==============================================================================
; Macro to define a synth start address table for a channel.
;==============================================================================
	PUBLIC SP_SET_SENTENCE_DATA_ADDR_TABLE
SP_SET_SENTENCE_DATA_ADDR_TABLE:
.IF (WITH_SP .EQ. 1H)
	.IF (WITH_APM .EQ. 1)
	EXTERN SET_SENTENCE_DATA_ADDR
	DW SET_SENTENCE_DATA_ADDR
	.ENDIF

	.IF (WITH_PC8 .EQ. 1)
	EXTERN SET_SENTENCE_DATA_ADDR
	DW SET_SENTENCE_DATA_ADDR
	.ENDIF

	.IF (WITH_P10 .EQ. 1)
	EXTERN SET_SENTENCE_DATA_ADDR
	DW SET_SENTENCE_DATA_ADDR
	.ENDIF
	
	;Add By TSH
	.IF (WITH_SIL .EQ. 1)
	EXTERN SET_SENTENCE_DATA_ADDR
	DW SET_SENTENCE_DATA_ADDR
	.ENDIF
	
	.IF (WITH_MDM .EQ. 1)
	EXTERN SET_SENTENCE_DATA_ADDR_SKIP
	DW SET_SENTENCE_DATA_ADDR_SKIP
	.ENDIF

	.IF (WITH_EMM .EQ. 1)
	EXTERN SET_SENTENCE_DATA_ADDR
	DW SET_SENTENCE_DATA_ADDR
	.ENDIF

	.IF (WITH_LP8 .EQ. 1)
	EXTERN SET_SENTENCE_DATA_ADDR
	DW SET_SENTENCE_DATA_ADDR
	.ENDIF

	.IF (WITH_MD6 .EQ. 1)
	EXTERN SET_SENTENCE_DATA_ADDR
	DW SET_SENTENCE_DATA_ADDR
	.ENDIF

	.IF (WITH_E2A .EQ. 1)
	EXTERN SET_SENTENCE_DATA_ADDR
	DW SET_SENTENCE_DATA_ADDR
	.ENDIF

	.IF (WITH_VC4 .EQ. 1)
	EXTERN SET_SENTENCE_DATA_ADDR
	DW SET_SENTENCE_DATA_ADDR
	.ENDIF

	.IF (WITH_MD4 .EQ. 1)
	EXTERN SET_SENTENCE_DATA_ADDR_SKIP
	DW SET_SENTENCE_DATA_ADDR_SKIP
	.ENDIF
	
	.IF (WITH_MDR .EQ. 1)
	EXTERN SET_SENTENCE_DATA_ADDR_MDR
	DW SET_SENTENCE_DATA_ADDR_MDR
	.ENDIF
	
	.IF (WITH_NM4 .EQ. 1)
	EXTERN SET_SENTENCE_DATA_ADDR_SKIP
	DW SET_SENTENCE_DATA_ADDR_SKIP
	.ENDIF
	
	.IF (WITH_NM4S .EQ. 1)
	EXTERN SET_SENTENCE_DATA_ADDR_SKIP
	DW SET_SENTENCE_DATA_ADDR_SKIP
	.ENDIF
.ENDIF
	DW 0000H
;==============================================================================
	PUBLIC EVO_SYNTH_START_TABLE
EVO_SYNTH_START_TABLE:
.IF (WITH_EVO .EQ. 1)
	.IF (WITH_CH0_EVO .EQ. 1)
		EXTERN EVO_FXF13_ISR_EVO0
		DW EVO_FXF13_ISR_EVO0
	.ENDIF
	
	.IF (WITH_CH1_EVO .EQ. 1)
		EXTERN EVO_FXF13_ISR_EVO1
		DW EVO_FXF13_ISR_EVO1
	.ENDIF
	
	.IF (WITH_CH2_EVO .EQ. 1)
		EXTERN EVO_FXF13_ISR_EVO2
		DW EVO_FXF13_ISR_EVO2
	.ENDIF
.ENDIF		
	DW 0000H
;==============================================================================
; Start address of RAM that store information about channels.
;==============================================================================
	PUBLIC		MS_CHANNEL_ADDR_TABLE
MS_CHANNEL_ADDR_TABLE:
.IF (WITH_MS .EQ. 1)
	; [Add] N588J chip series
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
		.IF  (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 0))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 0))) 
			.IF (WITH_VS0A .EQ. 1)
			DB VS0A_START
			.ENDIF
			
			.IF (WITH_VS2A .EQ. 1)
			DB VS2A_START
			.ENDIF
			
			.IF (WITH_VS1A .EQ. 1)
			DB VS1A_START
			.ENDIF
		.ENDIF
         	.IF (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 1))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 1)))
			.IF (WITH_VS1A .EQ. 1)
			DB VS1A_START
			.ENDIF
			
			.IF (WITH_VS2A .EQ. 1)
			DB VS2A_START
			.ENDIF
			
			.IF (WITH_VS0A .EQ. 1)
			DB VS0A_START
			.ENDIF
		 .ENDIF
         	.IF  ((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 1))
			.IF (WITH_VS2A .EQ. 1)
			DB VS2A_START
			.ENDIF
			
			.IF (WITH_VS1A .EQ. 1)
			DB VS1A_START
			.ENDIF
			
			.IF (WITH_VS0A .EQ. 1)
			DB VS0A_START
			.ENDIF
		.ENDIF		
	.ENDIF	
.ENDIF
	DB 00H
;---------------------------------------------------------------------------------------------------------
;---------------------------------------------------------------------------------------------------------
	PUBLIC SP_CHANNEL_ADDR_TABLE
SP_CHANNEL_ADDR_TABLE:
	; [Add] N588J chip series
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
		.IF (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0))||(WITH_SP_MIDI_SIMUL .EQ. 0))
			.IF (WITH_ISR_VS1A .EQ. 1H).OR.(WITH_VS1A_TONE .EQ. 1H).OR.(WITH_VS1A_HQPC8 .EQ. 1H).OR.(WITH_VS1A_VMDPC8 .EQ. 1H).OR.(WITH_VS1A_PCSPC8 .EQ. 1H)
			DB VS1A_START
			.ENDIF
			
			.IF (WITH_ISR_VS2A .EQ. 1H).OR.(WITH_VS2A_TONE .EQ. 1H).OR.(WITH_VS2A_HQPC8 .EQ. 1H).OR.(WITH_VS2A_VMDPC8 .EQ. 1H).OR.(WITH_VS2A_PCSPC8 .EQ. 1H)
			DB VS2A_START
			.ENDIF
			
			.IF (WITH_ISR_VS0A .EQ. 1H).OR.(WITH_VS0A_TONE .EQ. 1H).OR.(WITH_VS0A_HQPC8 .EQ. 1H).OR.(WITH_VS0A_VMDPC8 .EQ. 1H).OR.(WITH_VS0A_PCSPC8 .EQ. 1H)
			DB VS0A_START
			.ENDIF
			
		.ELSE
			.IF (WITH_ISR_VS0A .EQ. 1H).OR.(WITH_VS0A_TONE .EQ. 1H).OR.(WITH_VS0A_HQPC8 .EQ. 1H).OR.(WITH_VS0A_VMDPC8 .EQ. 1H).OR.(WITH_VS0A_PCSPC8 .EQ. 1H)
			DB VS0A_START
			.ENDIF
		
			.IF (WITH_ISR_VS1A .EQ. 1H).OR.(WITH_VS1A_TONE .EQ. 1H).OR.(WITH_VS1A_HQPC8 .EQ. 1H).OR.(WITH_VS1A_VMDPC8 .EQ. 1H).OR.(WITH_VS1A_PCSPC8 .EQ. 1H)
			DB VS1A_START
			.ENDIF	
		
			.IF (WITH_ISR_VS2A .EQ. 1H).OR.(WITH_VS2A_TONE .EQ. 1H).OR.(WITH_VS2A_HQPC8 .EQ. 1H).OR.(WITH_VS2A_VMDPC8 .EQ. 1H).OR.(WITH_VS2A_PCSPC8 .EQ. 1H)
			DB VS2A_START
			.ENDIF		
			
		.ENDIF
	.ENDIF	
	DB 00H
;==============================================================================
	PUBLIC		EVO_CHANNEL_ADDR_TABLE
EVO_CHANNEL_ADDR_TABLE:
.IF (WITH_EVO .EQ. 1)
	.IF (WITH_CH0_EVO .EQ. 1)
	DB EVO0_START
	.ENDIF
	
	.IF (WITH_CH1_EVO .EQ. 1)
	DB EVO1_START
	.ENDIF
				
	.IF (WITH_CH2_EVO .EQ. 1H)
	DB EVO2_START
	.ENDIF		
.ENDIF
	DB 00H	
;==============================================================================
; Table that store Channel_ID x 2 for all channels
;==============================================================================
	PUBLIC		MS_CHANNEL_ID_TABLE_2
MS_CHANNEL_ID_TABLE_2:
.IF (WITH_MS .EQ. 1)	
	; [Add] N588J chip series
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
		.IF  (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 0))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 0)))    
			.IF (WITH_VS0A .EQ. 1)
			DB CHANNEL_VS0A_2
			.ENDIF
		
			.IF (WITH_VS2A .EQ. 1)
			DB CHANNEL_VS2A_2
			.ENDIF
			
			.IF (WITH_VS1A .EQ. 1)
			DB CHANNEL_VS1A_2
			.ENDIF
		.ENDIF
         	.IF (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 1))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 1)))
			.IF (WITH_VS1A .EQ. 1)
			DB CHANNEL_VS1A_2
			.ENDIF
		
			.IF (WITH_VS2A .EQ. 1)
			DB CHANNEL_VS2A_2
			.ENDIF
			
			.IF (WITH_VS0A .EQ. 1)
			DB CHANNEL_VS0A_2
			.ENDIF
		.ENDIF
         	.IF  ((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 1))
			.IF (WITH_VS2A .EQ. 1)
			DB CHANNEL_VS2A_2
			.ENDIF
			
			.IF (WITH_VS1A .EQ. 1)
			DB CHANNEL_VS1A_2
			.ENDIF
			
			.IF (WITH_VS0A .EQ. 1)
			DB CHANNEL_VS0A_2
			.ENDIF				
		.ENDIF
	.ENDIF
.ENDIF
;------------------------------------------------------------------------------------------------
;------------------------------------------------------------------------------------------------	
	PUBLIC SP_CHANNEL_ID_TABLE_2
SP_CHANNEL_ID_TABLE_2:
	; [Add] N588J chip series
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
		.IF (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0))||(WITH_SP_MIDI_SIMUL .EQ. 0))
			.IF (WITH_VS1A .EQ. 1)
			DB CHANNEL_VS1A_2
			.ENDIF
			
			.IF (WITH_VS2A .EQ. 1)
			DB CHANNEL_VS2A_2
			.ENDIF
			
			.IF (WITH_VS0A .EQ. 1)
			DB CHANNEL_VS0A_2
			.ENDIF
			
		.ELSE		
			.IF (WITH_VS0A .EQ. 1H)
			DB CHANNEL_VS0A_2
			.ENDIF
	
			.IF (WITH_VS1A .EQ. 1H)
			DB CHANNEL_VS1A_2
			.ENDIF
	
			.IF (WITH_VS2A .EQ. 1H)
			DB CHANNEL_VS2A_2
			.ENDIF	
		.ENDIF
	.ENDIF
;-------------------------------------------------------------------------------
;SP_TM_CH_MAP_TABLE: speech timer index map to channel index
;-------------------------------------------------------------------------------
	PUBLIC SP_TM_CH_MAP_TABLE
SP_TM_CH_MAP_TABLE:
	.IF (WITH_SP .EQ. 1)
		; [Add] N588J chip series
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
			.IF (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0))||(WITH_SP_MIDI_SIMUL .EQ. 0))
				DB SP_CH2
				DB SP_CH0
				DB SP_CH1
			.ELSE
				DB SP_CH0
				DB SP_CH1
				DB SP_CH2
			.ENDIF
		.ENDIF
	.ENDIF
;---------------------------------------------------------------------------------
;MS_TM_CH_MAP_TABLE: timer index map to midi channel
;---------------------------------------------------------------------------------
	PUBLIC MS_TM_CH_MAP_TABLE
MS_TM_CH_MAP_TABLE:
.IF (WITH_MS .EQ. 1)
	; [Add] N588J chip series
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
		.IF  (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 0))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 0)))
			DB MS_CH0
			DB MS_CH2
			DB MS_CH1
		.ENDIF
         	.IF (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 1))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 1)))
			DB MS_CH2
			DB MS_CH0
			DB MS_CH1
		.ENDIF
         	.IF  ((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 1))	
			DB MS_CH2
			DB MS_CH1
			DB MS_CH0
		.ENDIF
	.ENDIF
.ENDIF
;---------------------------------------------------------------------------------------
;add by angela 2006.03.23 for DIS/EN CLOBALVOL feature
	.IF (WITH_SP .EQ. 1)
	.IF (WITH_VOL_ADJ .EQ. 1)	
	PUBLIC SP_GLOBAL_VOLUME_TABLE
SP_GLOBAL_VOLUME_TABLE:	
			DB GLOBAL_VOL_SP0
			DB GLOBAL_VOL_SP1
			DB GLOBAL_VOL_SP2
	.ENDIF
	.ENDIF	
;---------------------------------------------------------------------------------------
	.IF (WITH_SP .EQ. 1)
	.IF (WITH_VC4 .EQ. 1)	
	PUBLIC SP_GLOBAL_VC4_RATE_TABLE
SP_GLOBAL_VC4_RATE_TABLE:
	
			DB GLOBAL_VC4_RATE_SP0-GLOBAL_VC4_RATE_SP0
			DB GLOBAL_VC4_RATE_SP1-GLOBAL_VC4_RATE_SP0
			DB GLOBAL_VC4_RATE_SP2-GLOBAL_VC4_RATE_SP0
	.ENDIF
	.ENDIF	
;add by angela 2006.03.23 for DIS/EN CLOBALVOL feature	
;==============================================================================
; Tables about melody.
;==============================================================================

	.IF (WITH_MS .EQ. 1)
;==============================================================================
; Init procedures for all timbre types.
;==============================================================================
	PUBLIC	MS_INIT_CHANNEL_TABLE
MS_INIT_CHANNEL_TABLE:
	.IF (WITH_TONE .EQ. 1H)
	EXTERN 	INIT_TONE_MELODY
	DW INIT_TONE_MELODY
	.ENDIF

	.IF (WITH_VMDPC8 .EQ. 1H)
	EXTERN	INIT_HQPC8_MELODY
	DW INIT_HQPC8_MELODY
	.ENDIF

	.IF (WITH_HQPC8 .EQ. 1H)
	EXTERN INIT_HQPC8_MELODY
	DW INIT_HQPC8_MELODY
	.ENDIF

	.IF (WITH_PCSPC8 .EQ. 1H)
	EXTERN	INIT_PCSPC8_MELODY
	DW INIT_PCSPC8_MELODY
	.ENDIF

;-----------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------	
	PUBLIC	MS_DECAY_CHANNEL_TABLE
MS_DECAY_CHANNEL_TABLE:
	.IF (WITH_TONE .EQ. 1H)
	EXTERN 	DECAY_MIXER_VALUE_PROC
	DW DECAY_MIXER_VALUE_PROC
	.ENDIF

	.IF (WITH_VMDPC8 .EQ. 1H)
	EXTERN 	DECAY_MIXER_VALUE_PROC
	DW DECAY_MIXER_VALUE_PROC
	.ENDIF

	.IF (WITH_HQPC8 .EQ. 1H)
	EXTERN 	DECAY_MIXER_VALUE_PROC
	DW DECAY_MIXER_VALUE_PROC
	.ENDIF

	.IF (WITH_PCSPC8 .EQ. 1H)
	EXTERN 	DECAY_MIXER_VALUE_PROC
	DW DECAY_MIXER_VALUE_PROC
	.ENDIF

;==============================================================================
; Procedures that should be executed in each FXF ISR.
;==============================================================================
	EXTERN	DO_NEXT_TONE
	PUBLIC	MS_FXF_PROCESS_TABLE
MS_FXF_PROCESS_TABLE:
	.IF (WITH_TONE .EQ. 1H)
	EXTERN 	TONE_ADSR_STATE
	DW TONE_ADSR_STATE
	.ENDIF

	.IF (WITH_VMDPC8 .EQ. 1H)
	EXTERN 	HQ_ADSR_STATE
	DW HQ_ADSR_STATE
	.ENDIF

	.IF (WITH_HQPC8 .EQ. 1H)
	EXTERN HQ_ADSR_STATE
	DW HQ_ADSR_STATE
	.ENDIF

	.IF (WITH_PCSPC8 .EQ. 1H)
	EXTERN  DO_NEXT_TONE
	DW DO_NEXT_TONE
	.ENDIF


;==========================================================
	PUBLIC NOTE_ON_PROC_TABLE
NOTE_ON_PROC_TABLE:
	.IF (WITH_TONE .EQ. 1H)
	EXTERN NOTE_ON_TONE_MELODY
	DW NOTE_ON_TONE_MELODY
	.ENDIF

	.IF (WITH_VMDPC8 .EQ. 1H)
	EXTERN NOTE_ON_HQPC8_MELODY
	DW NOTE_ON_HQPC8_MELODY
	.ENDIF

	.IF (WITH_HQPC8 .EQ. 1H)
	EXTERN NOTE_ON_HQPC8_MELODY
	DW NOTE_ON_HQPC8_MELODY
	.ENDIF

	.IF (WITH_PCSPC8 .EQ. 1H)
	EXTERN NOTE_ON_PCSPC8_MELODY
	DW NOTE_ON_PCSPC8_MELODY
	.ENDIF

;==========================================================
	PUBLIC NOTE_OFF_PROC_TABLE
NOTE_OFF_PROC_TABLE:
	.IF (WITH_TONE .EQ. 1H)
		EXTERN NOTE_OFF_TONE_MELODY
		DW NOTE_OFF_TONE_MELODY
	.ENDIF

	.IF (WITH_VMDPC8 .EQ. 1H)
		EXTERN NOTE_OFF_HQPC8_MELODY
		DW NOTE_OFF_HQPC8_MELODY
	.ENDIF

	.IF (WITH_HQPC8 .EQ. 1H)
		EXTERN NOTE_OFF_HQPC8_MELODY
		DW NOTE_OFF_HQPC8_MELODY
	.ENDIF

	.IF (WITH_PCSPC8 .EQ. 1H)
		EXTERN NOTE_OFF_PCSPC8_MELODY
		DW NOTE_OFF_PCSPC8_MELODY
	.ENDIF
;==========================================================
	PUBLIC MS_CH1_NOTE_ON_SYNC_TABLE
MS_CH1_NOTE_ON_SYNC_TABLE:
	.IF (WITH_SYNC_CH1_MS .EQ. 1H)
		EXTERN MS_CH1_NOTE_ON_SYNC
		DW MS_CH1_NOTE_ON_SYNC
	.ELSE
		EXTERN RUN_NOTE_ON_START
		DW RUN_NOTE_ON_START
	.ENDIF
;==========================================================
	PUBLIC MS_CH1_NOTE_OFF_SYNC_TABLE
MS_CH1_NOTE_OFF_SYNC_TABLE:
	.IF (WITH_SYNC_CH1_MS .EQ. 1H)
		EXTERN MS_CH1_NOTE_OFF_SYNC
		DW MS_CH1_NOTE_OFF_SYNC
	.ELSE
		EXTERN NOTE_OFF_PROC_NEXT
		DW NOTE_OFF_PROC_NEXT
	.ENDIF
;==========================================================
	PUBLIC MS_GLOBAL_CHANNEL_VOLUME_TABLE
MS_GLOBAL_CHANNEL_VOLUME_TABLE:
	.IF (WITH_GLOBAL_CHANNEL_VOLM .EQ. 1H)
	; [Add] N588J chip series
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
		DB GLOBAL_CHANNEL_VOLM0-GLOBAL_CHANNEL_VOLM0
		DB GLOBAL_CHANNEL_VOLM1-GLOBAL_CHANNEL_VOLM0
		DB GLOBAL_CHANNEL_VOLM2-GLOBAL_CHANNEL_VOLM0
	.ENDIF
	.ENDIF
;==========================================================
	PUBLIC MS_GLOBAL_CHANNEL_INS_TABLE
MS_GLOBAL_CHANNEL_INS_TABLE:
	.IF (WITH_GLOBAL_CHANNEL_INS .EQ. 1H)
	; [Add] N588J chip series
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
		DB GLOBAL_CHANNEL_INS0-GLOBAL_CHANNEL_INS0
		DB GLOBAL_CHANNEL_INS1-GLOBAL_CHANNEL_INS0
		DB GLOBAL_CHANNEL_INS2-GLOBAL_CHANNEL_INS0
	.ENDIF	
	.ENDIF
;==========================================================
	PUBLIC ASSIGN_MELODY_CHANNEL_TABLE
ASSIGN_MELODY_CHANNEL_TABLE:
	.IF (WITH_MULTI_CHANNEL .EQ. 1H)
	; [Add] N588J chip series
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
		DB CH_SYNTH_CHANNEL0-CH_SYNTH_CHANNEL0
		DB CH_SYNTH_CHANNEL1-CH_SYNTH_CHANNEL0
		DB CH_SYNTH_CHANNEL2-CH_SYNTH_CHANNEL0
	.ENDIF	
	.ENDIF		
	
	.ENDIF ;(WITH_MS .EQ. 1)

;===================================================================
;
;===================================================================	
.IF (WITH_TONE .EQ. 1)
	PUBLIC		MS_CHANNEL_TONE_TABLE
MS_CHANNEL_TONE_TABLE:
	.IF (WITH_SP_MIDI_SIMUL .EQ. 0)
		DB WITH_VS1A_TONE
		DB WITH_VS2A_TONE
	.ELSE
		DB WITH_VS2A_TONE
		DB WITH_VS1A_TONE
	.ENDIF
.ENDIF
;-------------------------------------------------------------------------------------------------------------------------	
;-------------------------------------------------------------------------------------------------------------------------	
.IF (WITH_HQPC8 .EQ. 1 || WITH_VMDPC8 .EQ. 1)
	PUBLIC		MS_CHANNEL_HQ_TABLE
MS_CHANNEL_HQ_TABLE:
	; [Add] N588J chip series
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
		.IF  (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 0))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 0)))
			DB WITH_VS0A_HQPC8+WITH_VS0A_VMDPC8
			DB WITH_VS2A_HQPC8+WITH_VS2A_VMDPC8
			DB WITH_VS1A_HQPC8+WITH_VS1A_VMDPC8
		.ENDIF
         	.IF (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 1))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 1)))
			DB WITH_VS1A_HQPC8+WITH_VS1A_VMDPC8
			DB WITH_VS2A_HQPC8+WITH_VS2A_VMDPC8
			DB WITH_VS0A_HQPC8+WITH_VS0A_VMDPC8
		.ENDIF
         	.IF  ((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 1))
			DB WITH_VS2A_HQPC8+WITH_VS2A_VMDPC8
			DB WITH_VS1A_HQPC8+WITH_VS1A_VMDPC8
			DB WITH_VS0A_HQPC8+WITH_VS0A_VMDPC8	
		.ENDIF
	.ENDIF
.ENDIF
;------------------------------------------------------------------------------------------------------------
;------------------------------------------------------------------------------------------------------------
.IF (WITH_MS .EQ. 1)
	PUBLIC		MS_CHANNEL_PCSPC8_TABLE
MS_CHANNEL_PCSPC8_TABLE:
	; [Add] N588J chip series
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
		.IF  (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 0))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 0)))
			DB WITH_VS0A_PCSPC8
			DB WITH_VS2A_PCSPC8
			DB WITH_VS1A_PCSPC8
		.ENDIF
         	.IF (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 1))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 1)))
			DB WITH_VS1A_PCSPC8
			DB WITH_VS2A_PCSPC8
			DB WITH_VS0A_PCSPC8
		.ENDIF
         	.IF  ((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 1))
			DB WITH_VS2A_PCSPC8
			DB WITH_VS1A_PCSPC8
			DB WITH_VS0A_PCSPC8
		.ENDIF
	.ENDIF
.ENDIF
;------------------------------------------------------------------------------------------------------------------
;------------------------------------------------------------------------------------------------------------------
	PUBLIC		MS_CHANNEL_TABLE
MS_CHANNEL_TABLE:
.IF (WITH_MS .EQ. 1)
	; [Add] N588J chip series
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
		.IF  (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 0))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 0)))
			DB WITH_VS0A_HQPC8+WITH_VS0A_VMDPC8+WITH_VS0A_PCSPC8
			DB WITH_VS2A_HQPC8+WITH_VS2A_VMDPC8+WITH_VS2A_PCSPC8
			DB WITH_VS1A_HQPC8+WITH_VS1A_VMDPC8+WITH_VS1A_PCSPC8
		.ENDIF
 		.IF (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 1))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 1)))
			DB WITH_VS1A_HQPC8+WITH_VS1A_VMDPC8+WITH_VS1A_PCSPC8+WITH_VS1A_TONE
			DB WITH_VS2A_HQPC8+WITH_VS2A_VMDPC8+WITH_VS2A_PCSPC8+WITH_VS2A_TONE
			DB WITH_VS0A_HQPC8+WITH_VS0A_VMDPC8+WITH_VS0A_PCSPC8+WITH_VS0A_TONE
		.ENDIF
 		.IF  ((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 1))
			DB WITH_VS2A_HQPC8+WITH_VS2A_VMDPC8+WITH_VS2A_PCSPC8+WITH_VS2A_TONE
			DB WITH_VS1A_HQPC8+WITH_VS1A_VMDPC8+WITH_VS1A_PCSPC8+WITH_VS1A_TONE
			DB WITH_VS0A_HQPC8+WITH_VS0A_VMDPC8+WITH_VS0A_PCSPC8+WITH_VS0A_TONE
		.ENDIF	
	.ENDIF
.ENDIF
;==============================================================================
;
;==============================================================================

	.IF (WITH_MS .EQ. 1)
	PUBLIC ASSIGN_CHANNEL_PROC_TABLE
ASSIGN_CHANNEL_PROC_TABLE:
	.IF (WITH_DYNAMIC_CH .EQ. 1)
	EXTERNAL FIND_IDLE_CHANNEL_PROC
	DW FIND_IDLE_CHANNEL_PROC
	.ELSE
	EXTERNAL ASSIGN_MIDI_CHANNEL_PROC
	DW ASSIGN_MIDI_CHANNEL_PROC
	.ENDIF
	.ENDIF


;==============================================================================
; Timer tables
;==============================================================================
	PUBLIC SP_STZ_TMC_PROC_TABLE
	PUBLIC MS_STZ_TMC_PROC_TABLE
SP_STZ_TMC_PROC_TABLE:
MS_STZ_TMC_PROC_TABLE:
	.IF (WITH_VS0A .EQ. 1)
	EXTERNAL STZ_TM0C_PROC
	DW STZ_TM0C_PROC	;VS0A
	.ELSE
	DW 0000H
	.ENDIF
	
	.IF (WITH_VS1A .EQ. 1)
	EXTERNAL STZ_TM1C_PROC
	DW STZ_TM1C_PROC	;VS1A
	.ELSE
	DW 0000H
	.ENDIF
	
	.IF (WITH_VS2A .EQ. 1)
	EXTERNAL STZ_TM2C_PROC
	DW STZ_TM2C_PROC	;VS2A
	.ELSE
	DW 0000H
	.ENDIF
;------------------------------------------------------------------------
;
;------------------------------------------------------------------------
	PUBLIC SP_SET_TMV_PROC_TABLE
	PUBLIC MS_SET_TMV_PROC_TABLE
SP_SET_TMV_PROC_TABLE:
MS_SET_TMV_PROC_TABLE:
	.IF (WITH_VS0A .EQ. 1)
	EXTERNAL SET_TM0V_PROC
	DW SET_TM0V_PROC	;VS0A
	.ELSE
	DW 0000H
	.ENDIF
	
	.IF (WITH_VS1A .EQ. 1)
	EXTERNAL SET_TM1V_PROC
	DW SET_TM1V_PROC	;VS1A
	.ELSE
	DW 0000H
	.ENDIF
	
	.IF (WITH_VS2A .EQ. 1)
	EXTERNAL SET_TM2V_PROC
	DW SET_TM2V_PROC	;VS2A
	.ELSE
	DW 0000H
	.ENDIF
	

;------------------------------------------------------------------------
;
;------------------------------------------------------------------------
	PUBLIC SP_SET_TMC_PROC_TABLE
	PUBLIC MS_SET_TMC_PROC_TABLE
SP_SET_TMC_PROC_TABLE:
MS_SET_TMC_PROC_TABLE:
	.IF (WITH_VS0A .EQ. 1)
	EXTERNAL SET_TM0C_PROC
	DW SET_TM0C_PROC	;VS0A
	.ELSE
	DW 0000H
	.ENDIF
	
	.IF (WITH_VS1A .EQ. 1)
	EXTERNAL SET_TM1C_PROC
	DW SET_TM1C_PROC	;VS1A
	.ELSE
	DW 0000H
	.ENDIF
	
	.IF (WITH_VS2A .EQ. 1)
	EXTERNAL SET_TM2C_PROC
	DW SET_TM2C_PROC	;VS2A
	.ELSE
	DW 0000H
	.ENDIF
	
;------------------------------------------------------------------------
;
;------------------------------------------------------------------------
	PUBLIC SP_GET_TMC_PROC_TABLE
	PUBLIC MS_GET_TMC_PROC_TABLE
SP_GET_TMC_PROC_TABLE:
MS_GET_TMC_PROC_TABLE:
	.IF (WITH_VS0A .EQ. 1)
	EXTERNAL GET_TM0C_PROC
	DW GET_TM0C_PROC
	.ELSE
	DW 0000H
	.ENDIF
	
	.IF (WITH_VS1A .EQ. 1)
	EXTERN GET_TM1C_PROC
	DW GET_TM1C_PROC
	.ELSE
	DW 0000H
	.ENDIF
	
	.IF (WITH_VS2A .EQ. 1)
	EXTERN GET_TM2C_PROC
	DW GET_TM2C_PROC
	.ELSE
	DW 0000H
	.ENDIF
		
;------------------------------------------------------------------------
;
;------------------------------------------------------------------------
;	PUBLIC SP_GET_TMV_PROC_TABLE
;	PUBLIC MS_GET_TMV_PROC_TABLE
;SP_GET_TMV_PROC_TABLE:
;MS_GET_TMV_PROC_TABLE:
;	.IF (WITH_VS0A .EQ. 1)
;	EXTERNAL GET_TM0V_PROC
;	DW GET_TM0V_PROC
;	.ELSE
;	DW 0000H
;	.ENDIF
;	
;	.IF (WITH_VS1A .EQ. 1)
;	EXTERN GET_TM1V_PROC
;	DW GET_TM1V_PROC
;	.ELSE
;	DW 0000H
;	.ENDIF
;	
;	.IF (WITH_VS2A .EQ. 1)
;	EXTERN GET_TM2V_PROC
;	DW GET_TM2V_PROC
;	.ELSE
;	DW 0000H
;	.ENDIF	
;
;------------------------------------------------------------------------
;
;------------------------------------------------------------------------
	PUBLIC SP_INIT_TIMER_PROC_TABLE
	PUBLIC MS_INIT_TIMER_PROC_TABLE
SP_INIT_TIMER_PROC_TABLE:
MS_INIT_TIMER_PROC_TABLE:
	.IF (WITH_VS0A .EQ. 1)
	EXTERN INIT_TM0_PROC
	DW INIT_TM0_PROC	;VS0A
	.ELSE
	DW 0000H
	.ENDIF
	
	.IF (WITH_VS1A .EQ. 1)	
	EXTERN INIT_TM1_PROC
	DW INIT_TM1_PROC	;VS1A
	.ELSE
	DW 0000H
	.ENDIF
	
	.IF (WITH_VS2A .EQ. 1)
	EXTERN INIT_TM2_PROC
	DW INIT_TM2_PROC	;VS2A
	.ELSE
	DW 0000H
	.ENDIF
	

;------------------------------------------------------------------------
; The VSx ISR Table, Using This Table and SP_CHANNEL_ADDR_TABLE 
;------------------------------------------------------------------------
	PUBLIC	SP_STOP_TIMER_PROC_PWM_TABLE
	PUBLIC	MS_STOP_TIMER_PROC_PWM_TABLE
	PUBLIC	SP_STOP_TIMER_PROC_TABLE
	PUBLIC	MS_STOP_TIMER_PROC_TABLE	
SP_STOP_TIMER_PROC_TABLE:
MS_STOP_TIMER_PROC_TABLE:
	.IF (WITH_VS0A .EQ. 1)
	EXTERN STOP_TM0_PROC
	DW STOP_TM0_PROC	;VS0A
	.ELSE
	DW 0000H
	.ENDIF
	
	.IF (WITH_VS1A .EQ. 1)
	EXTERN STOP_TM1_PROC
	DW STOP_TM1_PROC	;VS1A
	.ELSE
	DW 0000H
	.ENDIF
	
	.IF (WITH_VS2A .EQ. 1)
	EXTERN STOP_TM2_PROC
	DW STOP_TM2_PROC	;VS2A
	.ELSE
	DW 0000H
	.ENDIF	

SP_STOP_TIMER_PROC_PWM_TABLE:
MS_STOP_TIMER_PROC_PWM_TABLE:
	.IF (WITH_VS0A .EQ. 1)
	EXTERN STOP_TM0_PWM_PROC
	DW STOP_TM0_PWM_PROC	;VS0A
	.ELSE
	DW 0000H
	.ENDIF
	
	.IF (WITH_VS1A .EQ. 1)
	EXTERN STOP_TM1_PWM_PROC
	DW STOP_TM1_PWM_PROC	;VS1A
	.ELSE
	DW 0000H
	.ENDIF
	
	.IF (WITH_VS2A .EQ. 1)
	EXTERN STOP_TM2_PWM_PROC
	DW STOP_TM2_PWM_PROC	;VS2A
	.ELSE
	DW 0000H
	.ENDIF	
;-----------------------------------------------------------------------------
.IF (WITH_HQPC8 == 1 || WITH_VMDPC8 == 1)
	PUBLIC HQ_MELODY_SYNTH_START_TABLE
HQ_MELODY_SYNTH_START_TABLE:
	; [Add] N588J chip series
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
		.IF  (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 0))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 0)))   
			.IF (WITH_VS0A_HQPC8 .EQ. 1)
				EXTERN HQPC8_READ_BYTE_VS0A
				DW HQPC8_READ_BYTE_VS0A
			.ELSE 
				DW 0000H	
			.ENDIF
			.IF (WITH_VS2A_HQPC8 .EQ. 1)
				EXTERN HQPC8_READ_BYTE_VS2A
				DW HQPC8_READ_BYTE_VS2A
			.ELSE
				DW 0000H
			.ENDIF

			.IF (WITH_VS1A_HQPC8 .EQ. 1)
				EXTERN HQPC8_READ_BYTE_VS1A
				DW HQPC8_READ_BYTE_VS1A
			.ELSE
				DW 0000H
			.ENDIF	
		.ENDIF
         	.IF (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 1))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 1)))  
			.IF (WITH_VS1A_HQPC8 .EQ. 1)
				EXTERN HQPC8_READ_BYTE_VS1A
				DW HQPC8_READ_BYTE_VS1A
			.ELSE 
				DW 0000H	
			.ENDIF
			.IF (WITH_VS2A_HQPC8 .EQ. 1)
				EXTERN HQPC8_READ_BYTE_VS2A
				DW HQPC8_READ_BYTE_VS2A
			.ELSE
				DW 0000H
			.ENDIF

			.IF (WITH_VS0A_HQPC8 .EQ. 1)
				EXTERN HQPC8_READ_BYTE_VS0A
				DW HQPC8_READ_BYTE_VS0A
			.ELSE
				DW 0000H
			.ENDIF	
		.ENDIF
         	.IF  ((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 1))		
			.IF (WITH_VS2A_HQPC8 .EQ. 1)
				EXTERN HQPC8_READ_BYTE_VS2A
				DW HQPC8_READ_BYTE_VS2A
			.ELSE 
				DW 0000H	
			.ENDIF
	
			.IF (WITH_VS1A_HQPC8 .EQ. 1)
				EXTERN HQPC8_READ_BYTE_VS1A
				DW HQPC8_READ_BYTE_VS1A
			.ELSE
				DW 0000H
			.ENDIF
	
			.IF (WITH_VS0A_HQPC8 .EQ. 1)
				EXTERN HQPC8_READ_BYTE_VS0A
				DW HQPC8_READ_BYTE_VS0A
			.ELSE
				DW 0000H
			.ENDIF	
		.ENDIF	
	.ENDIF	
;-------------------------------------------------------------------------------------
;-------------------------------------------------------------------------------------	
	PUBLIC HQ_VOLZERO_SYNTH_START_TABLE
HQ_VOLZERO_SYNTH_START_TABLE:
	; [Add] N588J chip series
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
		.IF  (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 0))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 0)))
			.IF (WITH_VS0A_HQPC8 .EQ. 1)
				EXTERN HQPC8_VOL_ZERO_VS0A
				DW HQPC8_VOL_ZERO_VS0A
			.ELSE 
				DW 0000H
			.ENDIF
	
			.IF (WITH_VS2A_HQPC8 .EQ. 1)
				EXTERN HQPC8_VOL_ZERO_VS2A
				DW HQPC8_VOL_ZERO_VS2A
			.ELSE
				DW 0000H
			.ENDIF
		
			.IF (WITH_VS1A_HQPC8 .EQ. 1)
				EXTERN HQPC8_VOL_ZERO_VS1A
				DW HQPC8_VOL_ZERO_VS1A
			.ELSE
				DW 0000H
			.ENDIF
		.ENDIF
         	.IF (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 1))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 1)))
			.IF (WITH_VS1A_HQPC8 .EQ. 1)
				EXTERN HQPC8_VOL_ZERO_VS1A
				DW HQPC8_VOL_ZERO_VS1A
			.ELSE 
				DW 0000H
			.ENDIF
	
			.IF (WITH_VS2A_HQPC8 .EQ. 1)
				EXTERN HQPC8_VOL_ZERO_VS2A
				DW HQPC8_VOL_ZERO_VS2A
			.ELSE
				DW 0000H
			.ENDIF
		
			.IF (WITH_VS0A_HQPC8 .EQ. 1)
				EXTERN HQPC8_VOL_ZERO_VS0A
				DW HQPC8_VOL_ZERO_VS0A
			.ELSE
				DW 0000H
			.ENDIF
		.ENDIF
         	.IF  ((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 1))		
			.IF (WITH_VS2A_HQPC8 .EQ. 1)
				EXTERN HQPC8_VOL_ZERO_VS2A
				DW HQPC8_VOL_ZERO_VS2A
			.ELSE 
				DW 0000H
			.ENDIF
		
			.IF (WITH_VS1A_HQPC8 .EQ. 1)
				EXTERN HQPC8_VOL_ZERO_VS1A
				DW HQPC8_VOL_ZERO_VS1A
			.ELSE
				DW 0000H
			.ENDIF
		
			.IF (WITH_VS0A_HQPC8 .EQ. 1)
				EXTERN HQPC8_VOL_ZERO_VS0A
				DW HQPC8_VOL_ZERO_VS0A
			.ELSE
				DW 0000H
			.ENDIF	
		.ENDIF	
	.ENDIF	
.ENDIF	
;-----------------------------------------------------------------------------
.IF (WITH_HQPC8 == 1 || WITH_VMDPC8 == 1)
	PUBLIC VMD_MELODY_SYNTH_START_TABLE
VMD_MELODY_SYNTH_START_TABLE:
	; [Add] N588J chip series
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
		.IF  (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 0))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 0)))
			.IF (WITH_VS0A_VMDPC8 .EQ. 1)
				EXTERN VMDPC8_READ_BYTE_VS0A
				DW VMDPC8_READ_BYTE_VS0A
			.ELSE 
				DW 0000H
			.ENDIF
		
			.IF (WITH_VS2A_VMDPC8 .EQ. 1)
				EXTERN VMDPC8_READ_BYTE_VS2A
				DW VMDPC8_READ_BYTE_VS2A
			.ELSE
				DW 0000H
			.ENDIF
		
			.IF (WITH_VS1A_VMDPC8 .EQ. 1)
				EXTERN VMDPC8_READ_BYTE_VS1A
				DW VMDPC8_READ_BYTE_VS1A
			.ELSE
				DW 0000H
			.ENDIF	
		.ENDIF
         	.IF (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 1))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 1)))
			.IF (WITH_VS1A_VMDPC8 .EQ. 1)
				EXTERN VMDPC8_READ_BYTE_VS1A
				DW VMDPC8_READ_BYTE_VS1A
			.ELSE 
				DW 0000H
			.ENDIF
		
			.IF (WITH_VS2A_VMDPC8 .EQ. 1)
				EXTERN VMDPC8_READ_BYTE_VS2A
				DW VMDPC8_READ_BYTE_VS2A
			.ELSE
				DW 0000H
			.ENDIF
		
			.IF (WITH_VS0A_VMDPC8 .EQ. 1)
				EXTERN VMDPC8_READ_BYTE_VS0A
				DW VMDPC8_READ_BYTE_VS0A
			.ELSE
				DW 0000H
			.ENDIF	
		.ENDIF
         	.IF  ((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 1))			
			.IF (WITH_VS2A_VMDPC8 .EQ. 1)
				EXTERN VMDPC8_READ_BYTE_VS2A
				DW VMDPC8_READ_BYTE_VS2A
			.ELSE 
				DW 0000H
			.ENDIF
		
			.IF (WITH_VS1A_VMDPC8 .EQ. 1)
				EXTERN VMDPC8_READ_BYTE_VS1A
				DW VMDPC8_READ_BYTE_VS1A
			.ELSE
				DW 0000H
			.ENDIF
		
			.IF (WITH_VS0A_VMDPC8 .EQ. 1)
				EXTERN VMDPC8_READ_BYTE_VS0A
				DW VMDPC8_READ_BYTE_VS0A
			.ELSE
				DW 0000H
			.ENDIF		
		.ENDIF	
	.ENDIF
;---------------------------------------------------------------------------------------------------	
	PUBLIC VMD_VOLZERO_SYNTH_START_TABLE
VMD_VOLZERO_SYNTH_START_TABLE:	
	; [Add] N588J chip series
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
		.IF  (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 0))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 0)))
			.IF (WITH_VS0A_VMDPC8 .EQ. 1)
				EXTERN VMDPC8_VOL_ZERO_VS0A
				DW VMDPC8_VOL_ZERO_VS0A
			.ELSE 
				DW 0000H
			.ENDIF
		
			.IF (WITH_VS2A_VMDPC8 .EQ. 1)
				EXTERN VMDPC8_VOL_ZERO_VS2A
				DW VMDPC8_VOL_ZERO_VS2A
			.ELSE
				DW 0000H
			.ENDIF
	
			.IF (WITH_VS1A_VMDPC8 .EQ. 1)
				EXTERN VMDPC8_VOL_ZERO_VS1A
				DW VMDPC8_VOL_ZERO_VS1A
			.ELSE
				DW 0000H
			.ENDIF
		.ENDIF
         	.IF (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 1))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 1)))
			.IF (WITH_VS1A_VMDPC8 .EQ. 1)
				EXTERN VMDPC8_VOL_ZERO_VS1A
				DW VMDPC8_VOL_ZERO_VS1A
			.ELSE 
				DW 0000H
			.ENDIF
		
			.IF (WITH_VS2A_VMDPC8 .EQ. 1)
				EXTERN VMDPC8_VOL_ZERO_VS2A
				DW VMDPC8_VOL_ZERO_VS2A
			.ELSE
				DW 0000H
			.ENDIF
	
			.IF (WITH_VS0A_VMDPC8 .EQ. 1)
				EXTERN VMDPC8_VOL_ZERO_VS0A
				DW VMDPC8_VOL_ZERO_VS0A
			.ELSE
				DW 0000H
			.ENDIF
		.ENDIF
         	.IF  ((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 1))		
			.IF (WITH_VS2A_VMDPC8 .EQ. 1)
				EXTERN VMDPC8_VOL_ZERO_VS2A
				DW VMDPC8_VOL_ZERO_VS2A
			.ELSE 
				DW 0000H
			.ENDIF
		
			.IF (WITH_VS1A_VMDPC8 .EQ. 1)
				EXTERN VMDPC8_VOL_ZERO_VS1A
				DW VMDPC8_VOL_ZERO_VS1A
			.ELSE
				DW 0000H
			.ENDIF
		
			.IF (WITH_VS0A_VMDPC8 .EQ. 1)
				EXTERN VMDPC8_VOL_ZERO_VS0A
				DW VMDPC8_VOL_ZERO_VS0A
			.ELSE
				DW 0000H
			.ENDIF		
		.ENDIF	
	.ENDIF
.ENDIF
;-----------------------------------------------------------------------------
.IF (WITH_PCSPC8 == 1)
	PUBLIC PCS_MELODY_SYNTH_START_TABLE
PCS_MELODY_SYNTH_START_TABLE:
	; [Add] N588J chip series
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
		.IF  (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 0))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 0)))
			.IF (WITH_VS0A_PCSPC8 .EQ. 1)
				EXTERN PCSPC8_READ_BYTE_VS0A
				DW PCSPC8_READ_BYTE_VS0A
			.ELSE 
				DW 0000H
			.ENDIF
		
			.IF (WITH_VS2A_PCSPC8 .EQ. 1)
				EXTERN PCSPC8_READ_BYTE_VS2A
				DW PCSPC8_READ_BYTE_VS2A
			.ELSE
				DW 0000H
			.ENDIF
			
			.IF (WITH_VS1A_PCSPC8 .EQ. 1)
				EXTERN PCSPC8_READ_BYTE_VS1A
				DW PCSPC8_READ_BYTE_VS1A
			.ELSE
				DW 0000H
			.ENDIF
		.ENDIF
         	.IF (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 1))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 1)))
			.IF (WITH_VS1A_PCSPC8 .EQ. 1)
				EXTERN PCSPC8_READ_BYTE_VS1A
				DW PCSPC8_READ_BYTE_VS1A
			.ELSE 
				DW 0000H
			.ENDIF
		
			.IF (WITH_VS2A_PCSPC8 .EQ. 1)
				EXTERN PCSPC8_READ_BYTE_VS2A
				DW PCSPC8_READ_BYTE_VS2A
			.ELSE
				DW 0000H
			.ENDIF
			
			.IF (WITH_VS0A_PCSPC8 .EQ. 1)
				EXTERN PCSPC8_READ_BYTE_VS0A
				DW PCSPC8_READ_BYTE_VS0A
			.ELSE
				DW 0000H
			.ENDIF
		.ENDIF
         	.IF  ((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 1))	
			.IF (WITH_VS2A_PCSPC8 .EQ. 1)
				EXTERN PCSPC8_READ_BYTE_VS2A
				DW PCSPC8_READ_BYTE_VS2A
			.ELSE 
				DW 0000H
			.ENDIF
		
			.IF (WITH_VS1A_PCSPC8 .EQ. 1)
				EXTERN PCSPC8_READ_BYTE_VS1A
				DW PCSPC8_READ_BYTE_VS1A
			.ELSE
				DW 0000H
			.ENDIF
		
			.IF (WITH_VS0A_PCSPC8 .EQ. 1)
				EXTERN PCSPC8_READ_BYTE_VS0A
				DW PCSPC8_READ_BYTE_VS0A
			.ELSE
				DW 0000H
			.ENDIF	
		.ENDIF	
	.ENDIF
;-----------------------------------------------------------------------------------------
	PUBLIC PCS_VOLZERO_SYNTH_START_TABLE
PCS_VOLZERO_SYNTH_START_TABLE:
	; [Add] N588J chip series
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
		.IF  (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 0))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 0)))
			.IF (WITH_VS0A_PCSPC8 .EQ. 1)
				EXTERN PCSPC8_VOL_ZERO_VS0A
				DW PCSPC8_VOL_ZERO_VS0A
			.ELSE 
				DW 0000H
			.ENDIF
			
			.IF (WITH_VS2A_PCSPC8 .EQ. 1)
				EXTERN PCSPC8_VOL_ZERO_VS2A
				DW PCSPC8_VOL_ZERO_VS2A
			.ELSE
				DW 0000H
			.ENDIF
			
			.IF (WITH_VS1A_PCSPC8 .EQ. 1)
				EXTERN PCSPC8_VOL_ZERO_VS1A
				DW PCSPC8_VOL_ZERO_VS1A
			.ELSE
				DW 0000H
			.ENDIF
		.ENDIF
         	.IF (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 1))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 1)))
			.IF (WITH_VS1A_PCSPC8 .EQ. 1)
				EXTERN PCSPC8_VOL_ZERO_VS1A
				DW PCSPC8_VOL_ZERO_VS1A
			.ELSE 
				DW 0000H
			.ENDIF
			
			.IF (WITH_VS2A_PCSPC8 .EQ. 1)
				EXTERN PCSPC8_VOL_ZERO_VS2A
				DW PCSPC8_VOL_ZERO_VS2A
			.ELSE
				DW 0000H
			.ENDIF
			
			.IF (WITH_VS0A_PCSPC8 .EQ. 1)
				EXTERN PCSPC8_VOL_ZERO_VS0A
				DW PCSPC8_VOL_ZERO_VS0A
			.ELSE
				DW 0000H
			.ENDIF
		.ENDIF
         	.IF  ((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 1))			
			.IF (WITH_VS2A_PCSPC8 .EQ. 1)
				EXTERN PCSPC8_VOL_ZERO_VS2A
				DW PCSPC8_VOL_ZERO_VS2A
			.ELSE 
				DW 0000H
			.ENDIF
		
			.IF (WITH_VS1A_PCSPC8 .EQ. 1)
				EXTERN PCSPC8_VOL_ZERO_VS1A
				DW PCSPC8_VOL_ZERO_VS1A
			.ELSE
				DW 0000H
			.ENDIF
		
			.IF (WITH_VS0A_PCSPC8 .EQ. 1)
				EXTERN PCSPC8_VOL_ZERO_VS0A
				DW PCSPC8_VOL_ZERO_VS0A
			.ELSE
				DW 0000H
			.ENDIF
		.ENDIF	
	.ENDIF
.ENDIF	
;================================================================================	
	PUBLIC SP_TM_DIVISION_MAP_ADDR_TABLE	
SP_TM_DIVISION_MAP_ADDR_TABLE:
.IF (WITH_SP .EQ. 1)
	; [Add] N588J chip series
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
		.IF (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0))||(WITH_SP_MIDI_SIMUL .EQ. 0))
			.IF (WITH_VS1A .EQ. 1)
			DW SP_TM1_DIV_MAP_TABLE
			.ENDIF
			
			.IF (WITH_VS2A .EQ. 1)
			DW SP_TM2_DIV_MAP_TABLE
			.ENDIF
			
			.IF (WITH_VS0A .EQ. 1)
			DW SP_TM0_DIV_MAP_TABLE
			.ENDIF
		
		.ELSE			
			.IF (WITH_VS0A .EQ. 1)
			DW SP_TM0_DIV_MAP_TABLE
			.ENDIF	
			
			.IF (WITH_VS1A .EQ. 1)
			DW SP_TM1_DIV_MAP_TABLE
			.ENDIF
			
			.IF (WITH_VS2A .EQ. 1)
			DW SP_TM2_DIV_MAP_TABLE
			.ENDIF
		
		.ENDIF
	.ENDIF
.ENDIF

	PUBLIC HQ_TM_DIVISION_MAP_ADDR_TABLE
HQ_TM_DIVISION_MAP_ADDR_TABLE:
.IF (WITH_MS .EQ. 1)
	; [Add] N588J chip series
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
		.IF  (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 0))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 0)))
			.IF (WITH_VS0A .EQ. 1)
			DW SP_TM0_DIV_MAP_TABLE
			.ENDIF	
			
			.IF (WITH_VS2A .EQ. 1)
			DW SP_TM2_DIV_MAP_TABLE
			.ENDIF
			
			.IF (WITH_VS1A .EQ. 1)
			DW SP_TM1_DIV_MAP_TABLE
			.ENDIF
		.ENDIF
         	.IF (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 1))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 1)))
			.IF (WITH_VS1A .EQ. 1)
			DW SP_TM1_DIV_MAP_TABLE
			.ENDIF
			
			.IF (WITH_VS2A .EQ. 1)
			DW SP_TM2_DIV_MAP_TABLE
			.ENDIF
			
			.IF (WITH_VS0A .EQ. 1)
			DW SP_TM0_DIV_MAP_TABLE
			.ENDIF	
		.ENDIF
         	.IF  ((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 1))			
			.IF (WITH_VS2A .EQ. 1)
			DW SP_TM2_DIV_MAP_TABLE
			.ENDIF
			
			.IF (WITH_VS1A .EQ. 1)
			DW SP_TM1_DIV_MAP_TABLE
			.ENDIF
			
			.IF (WITH_VS0A .EQ. 1)
			DW SP_TM0_DIV_MAP_TABLE
			.ENDIF			
		.ENDIF					
	.ENDIF
	DW 0000H
.ENDIF	
;---------------------------------------------------------------------------------------------
;---------------------------------------------------------------------------------------------

	.IF (WITH_VS0A .EQ. 1)
SP_TM0_DIV_MAP_TABLE:
	DB 00H
	DB 08H
	DB 02H	
	.ENDIF

;---------------------------------------------------------------------------------------------
;---------------------------------------------------------------------------------------------	
	.IF (WITH_VS1A .EQ. 1).OR.(WITH_VS2A .EQ. 1)
SP_TM1_DIV_MAP_TABLE:
SP_TM2_DIV_MAP_TABLE:
	DB 00H
	DB 02H
	DB 08H		
	.ENDIF	
		
;================================================================================	
	PUBLIC SP_SUPPORT_SIM_BUF	
SP_SUPPORT_SIM_BUF:
;	.IF (PARTNO='N588H000')
		.IF (WITH_SIM_TYPE .EQ. 0)	;W55F
			DB 31H	
			DB 39H	
		.ENDIF
		.IF (WITH_SIM_TYPE .EQ. 1)	;SPI,angela 2006.06.09
			DB 35H
			DB 3DH
		.ENDIF	
			DB 0
;	.ELSE
;		.IF (WITH_SIM_TYPE .EQ. 0)	;W55F
;			DB 31H	
;			DB 0	
;		.ENDIF
;		.IF (WITH_SIM_TYPE .EQ. 1)	;SPI,angela 2006.06.09
;			DB 35H
;			DB 0
;		.ENDIF	
;			DB 0
;	.ENDIF
		
;--------------------------------------------------------------------------------------------------------------------	
;--------------------------------------------------------------------------------------------------------------------	
	
	PUBLIC SP_CH_SIM_BUF_LOOP_FLAG  ;COMMON_FLAG: specify channel 1/2 i-f need loop sic
SP_CH_SIM_BUF_LOOP_FLAG: 
;	.IF (PARTNO='N588H000')
	DB SP_SIM_BUF_LOOP_FLAG_VS0A
	DB SP_SIM_BUF_LOOP_FLAG_VS1A			
	DB 0
;	.ELSE	
;	DB SP_SIM_BUF_LOOP_FLAG_VS0A
;	DB 0			
;	DB 0
;	.ENDIF

;--------------------------------------------------------------------------------------------------------------------
;--------------------------------------------------------------------------------------------------------------------			
	PUBLIC SP_CH_SIM_BUF_SET
SP_CH_SIM_BUF_SET:
;	.IF (PARTNO='N588H000')
		.IF (WITH_SIM_TYPE .EQ. 0)	;W55F
			DB 01H ;x-buffer
			DB 09H ;y-buffer
		.ENDIF
		.IF (WITH_SIM_TYPE .EQ. 1)	;SPI,angela 2006.06.09
			DB 05H ;x-buffer
			DB 0DH ;y-buffer
		.ENDIF	
			DB 00H  ;not support
;	.ELSE	
;		.IF (WITH_SIM_TYPE .EQ. 0)	;W55F
;			DB 01H ;x-buffer
;			DB 00H
;		.ENDIF
;		.IF (WITH_SIM_TYPE .EQ. 1)	;SPI,angela 2006.06.09
;			DB 05H ;x-buffer
;			DB 00H
;		.ENDIF	
;			DB 00H  ;not support
;	.ENDIF	
;==============================================================================================
	.PUBLIC SP_BUSY_GLOBAL_PLAY_TABLE
SP_BUSY_GLOBAL_PLAY_TABLE:
.IF(WITH_SP .EQ. 1)
	DB SP1_BZ
	DB SP2_BZ
	DB SP3_BZ
.ENDIF				
;--------------------------------------------------------------------------------------------------
	.PUBLIC EVO_BUSY_GLOBAL_PLAY_TABLE
EVO_BUSY_GLOBAL_PLAY_TABLE:
.IF(WITH_EVO .EQ. 1)
	DB EVO1_BZ
	DB EVO2_BZ
	DB EVO3_BZ
.ENDIF			
;------------------------------------------------------------------------
;-------------------------------------------------------
; For N588 Timer and Channel Assignment Mapping
; 0:VS1->TMG->SP0C
; 1:VS0->TM0->SP0A
; 2:VS2->TM1->SP0B
;--------------------------------------------------------
.IF(WITH_ALL_MIXER_SFR .EQ. 1)
	PUBLIC	SP_LO_INDEX_TABLE
SP_LO_INDEX_TABLE:
	; [Add] N588J chip series
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
		.IF (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0))||(WITH_SP_MIDI_SIMUL .EQ. 0))
			.IF (WITH_VS1A .EQ. 1)
			DB SP0AL-SP0AL
			.ENDIF
			
			.IF (WITH_VS2A .EQ. 1)
			DB SP0BL-SP0AL
			.ENDIF
			
			.IF (WITH_VS0A .EQ. 1)
			DB SP0CL-SP0AL
			.ENDIF
		.ELSE 			
			.IF (WITH_VS0A .EQ. 1)
			DB SP0CL-SP0AL
			.ENDIF
			
			.IF (WITH_VS1A .EQ. 1)
			DB SP0AL-SP0AL
			.ENDIF
			
			.IF (WITH_VS2A .EQ. 1)
			DB SP0BL-SP0AL
			.ENDIF	
		.ENDIF
	.ENDIF
	DB FFH
;----------------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------------
	PUBLIC	SP_HI_INDEX_TABLE
SP_HI_INDEX_TABLE:
	; [Add] N588J chip series
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
		.IF (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0))||(WITH_SP_MIDI_SIMUL .EQ. 0))
			.IF (WITH_VS1A .EQ. 1)
			DB SP0A-SP0A
			.ENDIF
			
			.IF (WITH_VS2A .EQ. 1)
			DB SP0B-SP0A
			.ENDIF
			
			.IF (WITH_VS0A .EQ. 1)
			DB SP0C-SP0A
			.ENDIF		
			
		.ELSE		
			.IF (WITH_VS0A .EQ. 1)
			DB SP0C-SP0A
			.ENDIF
			
			.IF (WITH_VS1A .EQ. 1)
			DB SP0A-SP0A
			.ENDIF
			
			.IF (WITH_VS2A .EQ. 1)
			DB SP0B-SP0A
			.ENDIF
		
		.ENDIF
	.ENDIF
;-----------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------
.IF (WITH_MS .EQ. 1)
	PUBLIC	MS_LO_INDEX_TABLE
MS_LO_INDEX_TABLE:
	; [Add] N588J chip series
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
		.IF  (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 0))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 0)))	
			.IF (WITH_VS0A .EQ. 1)
			DB SP0CL-SP0AL
			.ENDIF
		
			.IF (WITH_VS2A .EQ. 1)
			DB SP0BL-SP0AL
			.ENDIF
			
			.IF (WITH_VS1A .EQ. 1)
			DB SP0AL-SP0AL
			.ENDIF	
		.ENDIF
         	.IF (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 1))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 1)))
			.IF (WITH_VS1A .EQ. 1)
			DB SP0AL-SP0AL
			.ENDIF
		
			.IF (WITH_VS2A .EQ. 1)
			DB SP0BL-SP0AL
			.ENDIF
			
			.IF (WITH_VS0A .EQ. 1)
			DB SP0CL-SP0AL
			.ENDIF	
		.ENDIF
         	.IF  ((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 1))		
			.IF (WITH_VS2A .EQ. 1)
			DB SP0BL-SP0AL
			.ENDIF
			
			.IF (WITH_VS1A .EQ. 1)
			DB SP0AL-SP0AL
			.ENDIF
			
			.IF (WITH_VS0A .EQ. 1)
			DB SP0CL-SP0AL
			.ENDIF
		.ENDIF
	.ENDIF
	DB FFH	
;---------------------------------------------------------------------------------
;--------------------------------------------------------------------------------
	PUBLIC	MS_HI_INDEX_TABLE
MS_HI_INDEX_TABLE:
	; [Add] N588J chip series
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
		.IF  (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 0))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 0)))	
			.IF (WITH_VS0A .EQ. 1)
			DB SP0C-SP0A
			.ENDIF
		
			.IF (WITH_VS2A .EQ. 1)
			DB SP0B-SP0A
			.ENDIF
			
			.IF (WITH_VS1A .EQ. 1)
			DB SP0A-SP0A
			.ENDIF	
		.ENDIF
         	.IF (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 1))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 1)))
			.IF (WITH_VS1A .EQ. 1)
			DB SP0A-SP0A
			.ENDIF
		
			.IF (WITH_VS2A .EQ. 1)
			DB SP0B-SP0A
			.ENDIF
			
			.IF (WITH_VS0A .EQ. 1)
			DB SP0C-SP0A
			.ENDIF	
		.ENDIF
         	.IF  ((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 1))			
			.IF (WITH_VS2A .EQ. 1)
			DB SP0B-SP0A
			.ENDIF
			
			.IF (WITH_VS1A .EQ. 1)
			DB SP0A-SP0A
			.ENDIF
			
			.IF (WITH_VS0A .EQ. 1)
			DB SP0C-SP0A
			.ENDIF
		.ENDIF
	.ENDIF
.ENDIF
.ENDIF
;------------------------------------------------------------------------
;
;------------------------------------------------------------------------
.IF (WITH_T_BUFFER .EQ. 1)
	PUBLIC	SP_LO_T_INDEX_TABLE
SP_LO_T_INDEX_TABLE:
	; [Add] N588J chip series
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
		.IF (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0))||(WITH_SP_MIDI_SIMUL .EQ. 0))
			.IF (WITH_VS1A .EQ. 1)
			DB SP0ALT-SP0ALT
			.ENDIF
			
			.IF (WITH_VS2A .EQ. 1)
			DB SP0BLT-SP0ALT
			.ENDIF
			
			.IF (WITH_VS0A .EQ. 1)
			DB SP0CLT-SP0ALT
			.ENDIF
		.ELSE 			
			.IF (WITH_VS0A .EQ. 1)
			DB SP0CLT-SP0ALT
			.ENDIF
			
			.IF (WITH_VS1A .EQ. 1)
			DB SP0ALT-SP0ALT
			.ENDIF
			
			.IF (WITH_VS2A .EQ. 1)
			DB SP0BLT-SP0ALT
			.ENDIF	
		.ENDIF		
	.ENDIF
	DB FFH
;-------------------------------------------------------------------------------------------
;---------------------------------------------------------------------------------------------		
	PUBLIC	SP_HI_T_INDEX_TABLE
SP_HI_T_INDEX_TABLE:
	; [Add] N588J chip series
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
		.IF (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0))||(WITH_SP_MIDI_SIMUL .EQ. 0))
			.IF (WITH_VS1A .EQ. 1)
			DB SP0AT-SP0AT
			.ENDIF
			
			.IF (WITH_VS2A .EQ. 1)
			DB SP0BT-SP0AT
			.ENDIF
			
			.IF (WITH_VS0A .EQ. 1)
			DB SP0CT-SP0AT
			.ENDIF		
			
		.ELSE		
			.IF (WITH_VS0A .EQ. 1)
			DB SP0CT-SP0AT
			.ENDIF
			
			.IF (WITH_VS1A .EQ. 1)
			DB SP0AT-SP0AT
			.ENDIF
			
			.IF (WITH_VS2A .EQ. 1)
			DB SP0BT-SP0AT
			.ENDIF		
		.ENDIF
	.ENDIF	
;-------------------------------------------------------------------------------------------
;---------------------------------------------------------------------------------------------	
.IF (WITH_MS .EQ. 1)	
	PUBLIC	MS_LO_T_INDEX_TABLE
MS_LO_T_INDEX_TABLE:
	; [Add] N588J chip series
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
		.IF  (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 0))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 0)))              
			.IF (WITH_VS0A .EQ. 1)
			DB SP0CLT-SP0ALT
			.ENDIF
		
			.IF (WITH_VS2A .EQ. 1)
			DB SP0BLT-SP0ALT
			.ENDIF
			
			.IF (WITH_VS1A .EQ. 1)
			DB SP0ALT-SP0ALT
			.ENDIF	
		.ENDIF
         	.IF (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 1))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 1)))
			.IF (WITH_VS1A .EQ. 1)
			DB SP0ALT-SP0ALT
			.ENDIF
		
			.IF (WITH_VS2A .EQ. 1)
			DB SP0BLT-SP0ALT
			.ENDIF
			
			.IF (WITH_VS0A .EQ. 1)
			DB SP0CLT-SP0ALT
			.ENDIF	
		.ENDIF
         	.IF  ((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 1))
			.IF (WITH_VS2A .EQ. 1)
			DB SP0BLT-SP0ALT
			.ENDIF
			
			.IF (WITH_VS1A .EQ. 1)
			DB SP0ALT-SP0ALT
			.ENDIF
			
			.IF (WITH_VS0A .EQ. 1)
			DB SP0CLT-SP0ALT
			.ENDIF
		.ENDIF
	.ENDIF
;-------------------------------------------------------------------------------------------
;---------------------------------------------------------------------------------------------	
	PUBLIC	MS_HI_T_INDEX_TABLE
MS_HI_T_INDEX_TABLE:
	; [Add] N588J chip series
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
		.IF  (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 0))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 0)))     
			.IF (WITH_VS0A .EQ. 1)
			DB SP0CT-SP0AT
			.ENDIF
		
			.IF (WITH_VS2A .EQ. 1)
			DB SP0BT-SP0AT
			.ENDIF
			
			.IF (WITH_VS1A .EQ. 1)
			DB SP0AT-SP0AT
			.ENDIF	
		.ENDIF
         	.IF (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0)&&(WITH_SP .EQ. 1))||((WITH_SP_MIDI_SIMUL .EQ. 0)&&(WITH_TONE .EQ. 1)))
			.IF (WITH_VS1A .EQ. 1)
			DB SP0AT-SP0AT
			.ENDIF
		
			.IF (WITH_VS2A .EQ. 1)
			DB SP0BT-SP0AT
			.ENDIF
			
			.IF (WITH_VS0A .EQ. 1)
			DB SP0CT-SP0AT
			.ENDIF	
		.ENDIF
         	.IF  ((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 1))
			.IF (WITH_VS2A .EQ. 1)
			DB SP0BT-SP0AT
			.ENDIF
			
			.IF (WITH_VS1A .EQ. 1)
			DB SP0AT-SP0AT
			.ENDIF
			
			.IF (WITH_VS0A .EQ. 1)
			DB SP0CT-SP0AT
			.ENDIF
		.ENDIF
	.ENDIF
.ENDIF
.ENDIF	
;-------------------------------------------------------------------------------------------
;---------------------------------------------------------------------------------------------	
	PUBLIC DIS_UIO_EVENT_FLAG  ;COMMON_FLAG2: en/dis UIO event for speech channel
DIS_UIO_EVENT_FLAG: 
	DB DIS_UIO_EVENT_FLAG_CH0
	DB DIS_UIO_EVENT_FLAG_CH1			
	DB DIS_UIO_EVENT_FLAG_CH2	
;-------------------------------------------------------------------------------------------
;---------------------------------------------------------------------------------------------	
	PUBLIC PLAY_BACK_FLAG_TABLE  ;COMMON_FLAG2: en/dis UIO event for speech channel
PLAY_BACK_FLAG_TABLE: 
	DB PLAY_BACK_CH0
	DB PLAY_BACK_CH1			
	DB PLAY_BACK_CH2
;-------------------------------------------------------------------------------------------
;---------------------------------------------------------------------------------------------	
	PUBLIC SPEECH_PLAY_SEGMENT_RAM_TABLE
SPEECH_PLAY_SEGMENT_RAM_TABLE:
.IF (WITH_SP_SKIP .EQ. 1)
	DB CH1_PLAY_SEGMENT-CH1_PLAY_SEGMENT
	DB CH2_PLAY_SEGMENT-CH1_PLAY_SEGMENT
	DB CH3_PLAY_SEGMENT-CH1_PLAY_SEGMENT
.ENDIF
;------------------------------------------------------------------------
	PUBLIC SPEECH_PLAY_SEGMENT_ENABLE_TABLE
SPEECH_PLAY_SEGMENT_ENABLE_TABLE:
.IF (WITH_SP_SKIP .EQ. 1)
	; [Add] N588J chip series
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	.IF (CHIPSERIES = 'N588H').OR.(CHIPSERIES = 'N588J')
		.IF (((WITH_SP_MIDI_SIMUL .EQ. 1)&&(WITH_TONE .EQ. 0))||(WITH_SP_MIDI_SIMUL .EQ. 0))
			DB WITH_VS1A_NM4S+WITH_VS1A_NM4+WITH_VS1A_MD4+WITH_VS1A_MDM
			DB WITH_VS2A_NM4S+WITH_VS2A_NM4+WITH_VS2A_MD4+WITH_VS2A_MDM
			DB WITH_VS0A_NM4S+WITH_VS0A_NM4+WITH_VS0A_MD4+WITH_VS0A_MDM
		.ELSE
			DB WITH_VS0A_NM4S+WITH_VS0A_NM4+WITH_VS0A_MD4+WITH_VS0A_MDM
			DB WITH_VS1A_NM4S+WITH_VS1A_NM4+WITH_VS1A_MD4+WITH_VS1A_MDM
			DB WITH_VS2A_NM4S+WITH_VS2A_NM4+WITH_VS2A_MD4+WITH_VS2A_MDM
		.ENDIF
	.ENDIF
.ENDIF
;-------------------------------------------------------------------------------------------
;-------------------------------------------------------------------------------------------
	PUBLIC SPEECH_GLOBAL_SR_TMC_TABLE
SPEECH_GLOBAL_SR_TMC_TABLE:
.IF (WITH_SP_GLOBAL_SR .EQ. 1)
	DB CH1_GLOBAL_TMC-CH1_GLOBAL_TMC
	DB CH2_GLOBAL_TMC-CH1_GLOBAL_TMC
	DB CH3_GLOBAL_TMC-CH1_GLOBAL_TMC
.ENDIF
;------------------------------------------------------------------------
	PUBLIC SPEECH_GLOBAL_SR_TMV_TABLE
SPEECH_GLOBAL_SR_TMV_TABLE:
.IF (WITH_SP_GLOBAL_SR .EQ. 1)
	DB CH1_GLOBAL_TMV-CH1_GLOBAL_TMV
	DB CH2_GLOBAL_TMV-CH1_GLOBAL_TMV
	DB CH3_GLOBAL_TMV-CH1_GLOBAL_TMV
.ENDIF
;-------------------------------------------------------------------------------------------
;-------------------------------------------------------------------------------------------
.ENDIF	
;((WITH_SP .EQ. 1).OR.(WITH_MS .EQ. 1).OR.(WITH_EVO .EQ. 1))
.ENDIF
;(WITH_USER_PLAY)

	PUBLIC BP0M_BAK_TABLE
	PUBLIC BP1M_BAK_TABLE
BP0M_BAK_TABLE:
BP1M_BAK_TABLE:
	DB	 00H,01H,02H,03H,04H,05H,06H,07H,08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
	DB	 10H,11H,12H,13H,14H,15H,16H,17H,18H,19H,1AH,1BH,1CH,1DH,1EH,1FH
	DB	 20H,21H,22H,23H,24H,25H,26H,27H,28H,29H,2AH,2BH,2CH,2DH,2EH,2FH
	DB	 30H,31H,32H,33H,34H,35H,36H,37H,38H,39H,3AH,3BH,3CH,3DH,3EH,3FH
	DB	 40H,41H,42H,43H,44H,45H,46H,47H,48H,49H,4AH,4BH,4CH,4DH,4EH,4FH
	DB	 50H,51H,52H,53H,54H,55H,56H,57H,58H,59H,5AH,5BH,5CH,5DH,5EH,5FH
	DB	 60H,61H,62H,63H,64H,65H,66H,67H,68H,69H,6AH,6BH,6CH,6DH,6EH,6FH
	DB	 70H,71H,72H,73H,74H,75H,76H,77H,78H,79H,7AH,7BH,7CH,7DH,7EH,7FH
	DB	 80H,81H,82H,83H,84H,85H,86H,87H,88H,89H,8AH,8BH,8CH,8DH,8EH,8FH
	DB	 90H,91H,92H,93H,94H,95H,96H,97H,98H,99H,9AH,9BH,9CH,9DH,9EH,9FH
	DB	 A0H,A1H,A2H,A3H,A4H,A5H,A6H,A7H,A8H,A9H,AAH,ABH,ACH,ADH,AEH,AFH
	DB	 B0H,B1H,B2H,B3H,B4H,B5H,B6H,B7H,B8H,B9H,BAH,BBH,BCH,BDH,BEH,BFH
	DB	 C0H,C1H,C2H,C3H,C4H,C5H,C6H,C7H,C8H,C9H,CAH,CBH,CCH,CDH,CEH,CFH
	DB	 D0H,D1H,D2H,D3H,D4H,D5H,D6H,D7H,D8H,D9H,DAH,DBH,DCH,DDH,DEH,DFH
	DB	 E0H,E1H,E2H,E3H,E4H,E5H,E6H,E7H,E8H,E9H,EAH,EBH,ECH,EDH,EEH,EFH
	DB	 F0H,F1H,F2H,F3H,F4H,F5H,F6H,F7H,F8H,F9H,FAH,FBH,FCH,FDH,FEH,FFH
	
	PUBLIC BP0D_OUTPUT_TABLE
	PUBLIC BP1D_OUTPUT_TABLE
BP0D_OUTPUT_TABLE:
BP1D_OUTPUT_TABLE:
	DB	 FFH,FEH,FDH,FCH,FBH,FAH,F9H,F8H,F7H,F6H,F5H,F4H,F3H,F2H,F1H,F0H
	DB	 EFH,EEH,EDH,ECH,EBH,EAH,E9H,E8H,E7H,E6H,E5H,E4H,E3H,E2H,E1H,E0H
	DB	 DFH,DEH,DDH,DCH,DBH,DAH,D9H,D8H,D7H,D6H,D5H,D4H,D3H,D2H,D1H,D0H
	DB	 CFH,CEH,CDH,CCH,CBH,CAH,C9H,C8H,C7H,C6H,C5H,C4H,C3H,C2H,C1H,C0H
	DB	 BFH,BEH,BDH,BCH,BBH,BAH,B9H,B8H,B7H,B6H,B5H,B4H,B3H,B2H,B1H,B0H
	DB	 AFH,AEH,ADH,ACH,ABH,AAH,A9H,A8H,A7H,A6H,A5H,A4H,A3H,A2H,A1H,A0H
	DB	 9FH,9EH,9DH,9CH,9BH,9AH,99H,98H,97H,96H,95H,94H,93H,92H,91H,90H
	DB	 8FH,8EH,8DH,8CH,8BH,8AH,89H,88H,87H,86H,85H,84H,83H,82H,81H,80H
	DB	 7FH,7EH,7DH,7CH,7BH,7AH,79H,78H,77H,76H,75H,74H,73H,72H,71H,70H
	DB	 6FH,6EH,6DH,6CH,6BH,6AH,69H,68H,67H,66H,65H,64H,63H,62H,61H,60H
	DB	 5FH,5EH,5DH,5CH,5BH,5AH,59H,58H,57H,56H,55H,54H,53H,52H,51H,50H
	DB	 4FH,4EH,4DH,4CH,4BH,4AH,49H,48H,47H,46H,45H,44H,43H,42H,41H,40H
	DB	 3FH,3EH,3DH,3CH,3BH,3AH,39H,38H,37H,36H,35H,34H,33H,32H,31H,30H
	DB	 2FH,2EH,2DH,2CH,2BH,2AH,29H,28H,27H,26H,25H,24H,23H,22H,21H,20H
	DB	 1FH,1EH,1DH,1CH,1BH,1AH,19H,18H,17H,16H,15H,14H,13H,12H,11H,10H
	DB	 0FH,0EH,0DH,0CH,0BH,0AH,09H,08H,07H,06H,05H,04H,03H,02H,01H,00H
		 

;.IF	(PARTNO='N588H000').OR.(PARTNO='N588H200').OR.(PARTNO='N588H250').OR.(PARTNO='N588H340').OR.(PARTNO='N588H201').OR.(PARTNO='N588H251').OR.(PARTNO='N588H341').OR.(PARTNO='N588H480').OR.(PARTNO='N588H650').OR.(PARTNO='N588HP340').OR.(PARTNO='N588J200').OR.(PARTNO='N588J250').OR.(PARTNO='N588J340').OR.(PARTNO='N588J201').OR.(PARTNO='N588J251').OR.(PARTNO='N588J341').OR.(PARTNO='N588J480').OR.(PARTNO='N588J650')
	PUBLIC BP2M_BAK_TABLE
	PUBLIC BP2D_OUTPUT_TABLE
BP2M_BAK_TABLE:
	DB	 00H,0FH,F0H,FFH
	
BP2D_OUTPUT_TABLE:
	DB	 FFH,F0H,0FH,00H
;.ENDIF

	.IF (WITH_SP .EQ. 1).OR.(WITH_MS .EQ. 1).OR.(WITH_EVO .EQ. 1)
	INCLUDE		CommLibAPIs.asm		;for PSF kernel/user need APIs
;	INCLUDE 	CO_PLAY_INandEXT.asm
	.ENDIF
;-------------------------------------------------------------------------------------------
; For Cap Sensor Parameter Table
	.IF (CAP_SENSOR_IMPLEMENTATION .EQ. 1)
	INCLUDE		CapSensorTable_1.asm
	.ENDIF
	.IF (CAP_SENSOR_IMPLEMENTATION .EQ. 2)
	INCLUDE		CapSensorTable_2.asm
	.ENDIF
; For Cap Sensor Parameter Table END
;---------------------------------------------------------------------------------------------	
	.ENDS	
	
;	PLAYINDEX_LIB_CODE: SECTION
;	.IF (WITH_SP .EQ. 1).OR.(WITH_MS .EQ. 1).OR.(WITH_EVO .EQ. 1)
;		.IF(WITH_SIM_SP .EQ. 1)
;			INCLUDE CO_PLAY_EXTERNAL.asm
;		.ENDIF
;	.ENDIF
;	ENDS
    